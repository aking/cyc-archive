00:00:00 --- log: started opencyc/02.12.02
01:32:50 --- quit: mea_culpa (Read error: 110 (Connection timed out))
01:52:49 --- join: yepster (~yepster@217.117.225.12) joined #opencyc
06:59:42 --- join: reed_ (~reed@207.207.8.185) joined #opencyc
07:17:56 --- quit: reed__ (Read error: 110 (Connection timed out))
07:23:01 <yepster> I wondered what the number of assertions per mt was..
07:23:05 <yepster> (#$and 
07:23:05 <yepster>   (#$isa ?MT #$Microtheory) 
07:23:05 <yepster>   (#$evaluate ?N 
07:23:05 <yepster>     (#$extentCardinality 
07:23:05 <yepster>       (#$TheSetOf ?SENT 
07:23:06 <yepster>         (#$ist-Asserted ?MT ?SENT)) ?N)))
07:23:24 <yepster> however this does not work. Any suggestions?
08:31:02 --- join: Graham (~Demi@207.207.8.145) joined #opencyc
08:31:24 --- mode: ChanServ set +o Graham
11:29:31 <dmiles> hrrm looking for a way to represent sending an email
11:29:47 <dmiles> not the detail of the process
11:29:50 <dmiles> well maybe
11:30:08 <dmiles> but a way is stating joe sent an email to john
11:30:40 <dmiles> close to #$SendingSomething
11:31:35 <dmiles> these are the times that two differnt cyc users could potentially make up two differnt constants
11:32:13 <dmiles> it would seem the more "detailed" their cyc is (even if absurdly detailed) the better
11:34:31 <Graham> yes, more detailed as long as it's not to the point of making too many assumptions is good.
11:41:12 <dmiles> deep down everything is a predicate or object.. real meanings of objects are based on the predicates that connect them.. like how a collection is really a uniary predicate arround the object.. in the case of vocabulary
11:42:37 <dmiles> i was just thinking how even hasAttribute.. etc
11:43:02 <dmiles> genl* reduces down to a bunch of genlPreds
11:43:47 <dmiles> but anyways the Mts i guess break up the semantics
11:43:54 <dmiles> (good thing)
11:44:04 <dmiles> err (as a good thing)
11:44:50 <dmiles> guess what i was saying being constant heavy .. is like being predicate heavy
15:09:44 <dmiles> you know what i wish cyc would have? .. a very vanily horn clause evaluator
15:10:08 <dmiles> :)
15:10:14 <dmiles> so i could load prolog source
16:45:26 --- join: mea_culpa_asleep (~mea_culpa@12-213-238-134.client.attbi.com) joined #opencyc
16:52:01 --- nick: mea_culpa_asleep -> mea_culpa
17:42:43 --- join: Cobwa (~cobra@dsl-64-129-232-145.telocity.com) joined #opencyc
18:38:04 --- quit: Cobwa ("[x]chat")
20:20:29 --- join: graylensman (~ray@fl-wbu2c6-556.pbc.adelphia.net) joined #opencyc
20:23:37 --- quit: deltab (Read error: 60 (Operation timed out))
20:25:20 --- join: deltab (~deltab@espians.com) joined #opencyc
21:55:09 --- join: kino (~kinoc@crtntx1-ar2-094-170.crtntx1.dsl-verizon.net) joined #opencyc
21:56:29 --- quit: kino ("using sirc version 2.211+KSIRC/1.1")
21:57:59 --- join: kinor (~kinoc@crtntx1-ar2-094-170.crtntx1.dsl-verizon.net) joined #opencyc
22:10:55 --- quit: Kinoc (Read error: 110 (Connection timed out))
22:18:11 --- part: kinor left #opencyc
22:20:21 --- join: kinoc (~kinoc@crtntx1-ar2-094-170.crtntx1.dsl-verizon.net) joined #opencyc
22:42:02 --- quit: graylensman ("Client Exiting")
22:55:25 --- quit: fleeky (Read error: 104 (Connection reset by peer))
23:59:59 --- log: ended opencyc/02.12.02
