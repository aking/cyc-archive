00:00:00 --- log: started opencyc/02.04.22
00:00:35 <dmiles> bsh: ircbot.toCycList("(?W . Cyc)").second();
00:00:35 <CycLBot> Sourced file: <Inline eval of: ircbot.toCycList("(?W . Cyc)").second(); > : Attempt to invoke method second on null valu
00:00:36 <CycLBot> e : at Line: 1 : in file: <Inline eval of: ircbot.toCycList("(?W . Cyc)").second(); > : .second ( )
00:00:56 <dmiles> bsh: ircbot.toCycList("(W . Cyc)").second();
00:00:57 <CycLBot> Sourced file: <Inline eval of: ircbot.toCycList("(W . Cyc)").second(); > : Attempt to invoke method second on null value 
00:00:57 <CycLBot> : at Line: 1 : in file: <Inline eval of: ircbot.toCycList("(W . Cyc)").second(); > : .second ( )
00:01:39 <dmiles> bsh: a = ircbot.toCycList("(W . Cyc)");
00:01:47 <dmiles> bsh a
00:01:54 <dmiles> bsh: a
00:02:04 <dmiles> bsh:CycList a = ircbot.toCycList("(W . Cyc)");
00:02:05 <CycLBot> Sourced file: <Inline eval of: CycList a = ircbot.toCycList("(W . Cyc)"); > : Typed variable declaration : Class: CycLis
00:02:05 <CycLBot> t not found in namespace : at Line: 1 : in file: <Inline eval of: CycList a = ircbot.toCycList("(W . Cyc)"); > : CycList 
00:02:06 <CycLBot> a = ircbot .toCycList ( "(W . Cyc)" )
00:02:23 <dmiles> bsh: CycList aCl = ircbot.toCycList("(W . Cyc)");
00:02:24 <CycLBot> Sourced file: <Inline eval of: CycList aCl = ircbot.toCycList("(W . Cyc)"); > : Typed variable declaration : Class: CycLis
00:02:24 <CycLBot> t not found in namespace : at Line: 1 : in file: <Inline eval of: CycList aCl = ircbot.toCycList("(W . Cyc)"); > : CycLis
00:02:25 <CycLBot> t aCl = ircbot .toCycList ( "(W . Cyc)" )
00:05:43 <dmiles> cyclify: (?W . #$isa)
00:24:15 --- quit: CycLBot (Remote closed the connection)
00:26:45 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
00:26:45 <CycLBot> I am initializing
00:26:47 <CycLBot> I am ready to chat
00:27:00 <dmiles>  ask (isa ?Who Cyclist)
00:27:01 <CycLBot> (((?WHO . Cyc)))
00:27:28 <dmiles> bsh: ircbot.paraphrased.add("#opencyc")
00:27:28 <CycLBot> true
00:27:30 <dmiles>  ask (isa ?Who Cyclist)
00:27:31 <CycLBot> (((?WHO . Cyc)))
00:34:39 --- quit: CycLBot (Remote closed the connection)
00:35:36 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
00:35:37 <CycLBot> I am initializing
00:35:39 <CycLBot> I am ready to chat
00:36:47 <dmiles> bsh: ircbot.paraphrased.add("#opencyc")
00:36:48 <CycLBot> true
00:36:50 <dmiles>  ask (isa ?Who Cyclist)
00:36:51 <CycLBot> (?WHO . Cyc)
00:37:38 <dmiles> QUERY (isa ?Who Cyclist)
00:37:39 <CycLBot> (?WHO . Guest), (?WHO . NLReviewer), (?WHO . Cyc), (?WHO . CycAdministrator)
00:38:15 <mea_culpa> ?
00:38:16 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "A SYMBOL at 0x40010150 is not a f_6469.")
00:38:22 <mea_culpa> ?who
00:38:36 <dmiles> hrrm likes like i need to make it save biundiong
00:38:53 <mea_culpa> binding?
00:39:10 <dmiles> bindings are values for each variable
00:39:22 <dmiles> meaning on a long anser like...
00:39:39 <dmiles> query: (isa ?W Predicate)
00:39:41 <CycLBot> Your question returned 1609 answers .. please refine. (here are the first five)
00:39:43 <CycLBot> (?W . (TypeCapableFn anatomicallyCapableOf))
00:39:44 <CycLBot> (?W . (TypeCapableFn learnedCapableOf))
00:39:45 <CycLBot> (?W . (TypeCapableFn behaviorCapable))
00:39:46 <CycLBot> (?W . (TypeCapableFn physicallyCapableOf))
00:39:47 <CycLBot> (?W . (TypeCapableFn fiscallyCapableOf))
00:40:07 <dmiles> that it lets you interupt it
00:40:14 <dmiles> well if uit is under 50 answers
00:40:28 <dmiles> query: (isa ?W Person)
00:40:30 <CycLBot> (?W . CycAdministrator), (?W . Guest)
00:40:45 <dmiles> query: (genls ?W Person)
00:40:45 <CycLBot> Your question returned 83 answers .. please refine. (here are the first five)
00:40:47 <CycLBot> (?W . Administrator)
00:40:48 <CycLBot> (?W . Manager)
00:40:49 <CycLBot> (?W . AdministrativeStaffPerson)
00:40:50 <CycLBot> (?W . DeskWorker)
00:40:51 <CycLBot> (?W . (FemaleFn LawEnforcementOfficer))
00:41:18 <dmiles> query: (genls ?W HumanDwelling)
00:41:20 <CycLBot> (?W . HumanDwelling)
00:41:43 <dmiles> i can come up with something between 5 and 50 :P
00:41:46 <dmiles> err cant
00:41:56 <dmiles> query: (isa Cyc ?what)
00:41:58 <CycLBot> (?WHAT . TheTerm)
00:41:59 <CycLBot> (?WHAT . Entity)
00:42:00 <CycLBot> (?WHAT . IndexicalConcept)
00:42:01 <CycLBot> (?WHAT . CycLReifiableDenotationalTerm)
00:42:02 <CycLBot> (?WHAT . CycLReifiedDenotationalTerm)
00:42:02 <dmiles> .
00:42:03 <CycLBot> (?WHAT . HLReifiedDenotationalTerm)
00:42:15 <dmiles> lets you interupt the query
00:42:24 <dmiles> then i need to have a continue..
00:42:41 <dmiles> mabye ? will trigger continue
00:42:48 <Method> lol
00:42:54 <Method> are you talking to yourself?
00:43:01 <dmiles> my gf! ;P
00:43:08 <Method> oh
00:43:18 <dmiles> you met her on Efnet
00:43:21 <Method> yea
00:43:22 <Method> i remember
00:43:27 <Method> i didn't see her joi
00:43:28 <Method> n
00:45:43 <dmiles> i am trying to make the paraphrase for a dotted lisp pair work right
00:46:39 <dmiles> since its not a proper list it doesnt paraphrase the value.. almost have it though i think
00:50:04 <dmiles> subl: (generate-phrase :EXUASTED)
00:50:04 <CycLBot> :EXUASTED
00:50:10 <dmiles> subl: (generate-phrase EXUASTED)
00:50:10 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Variable EXUASTED is unbound")
00:56:55 <dmiles> subl: (generate-phrase 'EXUASTED)
00:56:55 <CycLBot> the symbol EXUASTED
01:01:40 --- quit: CycLBot (Remote closed the connection)
01:02:21 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
01:02:21 <CycLBot> I am initializing
01:02:23 <CycLBot> I am ready to chat
01:02:34 <dmiles> QUERY (isa ?Who Cyclist)
01:02:34 <CycLBot> (((?WHO . Guest)) ((?WHO . NLReviewer)) ((?WHO . Cyc)) ((?WHO . CycAdministrator)))
01:02:50 <dmiles> bsh: ircbot.paraphrased.add("#opencyc")
01:02:51 <CycLBot> true
01:02:52 <dmiles> QUERY (isa ?Who Cyclist)
01:02:53 <CycLBot> (?WHO . Guest), (?WHO . NLReviewer), (?WHO . Cyc), (?WHO . CycAdministrator)
03:15:20 --- quit: CycLBot (Remote closed the connection)
04:17:33 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
09:08:44 --- quit: Method (Connection timed out)
09:12:55 --- join: Method (Method@lotus.snu.edu) joined #opencyc
10:53:20 --- join: Method_ (Method@lotus.snu.edu) joined #opencyc
10:53:40 --- quit: Method (Read error: 104 (Connection reset by peer))
11:14:23 --- quit: Method_ (Connection timed out)
11:43:09 --- join: Method (Method@lotus.snu.edu) joined #opencyc
11:45:50 --- quit: Method (Read error: 104 (Connection reset by peer))
12:12:18 * dmiles returns
12:21:17 --- join: Method (~method@lotus.snu.edu) joined #opencyc
12:42:53 <dmiles> query (isa ?X Cyclist)
12:42:55 <CycLBot> (?X . Guest), (?X . NLReviewer), (?X . Cyc), (?X . CycAdministrator)
12:43:50 <dmiles> hrrm, having trouble getting variable results into paraphrase
12:48:50 --- quit: dmiles (Read error: 104 (Connection reset by peer))
12:49:42 --- join: dmiles (~alife@12-225-207-235.client.attbi.com) joined #opencyc
13:21:50 --- join: Taral (taral@cs6625132-47.austin.rr.com) joined #opencyc
13:24:57 <Graham> Hi Taral
13:31:18 --- quit: Method (Read error: 104 (Connection reset by peer))
13:35:11 <Taral> hi
13:42:35 <stevereed> subl: (+ 2 3)
13:42:36 <CycLBot> 5
13:43:02 <Taral> How come (#$isa ...) doesn't work?
13:43:42 <stevereed> subl: (generate-phrase '(#$likesAsFriend #$Cyc #$CycAdministrator))
13:43:43 <CycLBot> Cyc processes like Cyc administrator
13:44:06 <stevereed> ask: (disjointWith #$Dog ?not-a-dog)
13:44:07 <Taral> I see.
13:44:08 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
13:44:09 <CycLBot> (#$disjointWith #$Dog ?NOT-A-DOG)
13:44:09 <CycLBot> was not well formed because:
13:44:11 <CycLBot> Mt #$stevereedChatMt is invalid.
13:44:11 <CycLBot> (#$disjointWith #$Dog ?NOT-A-DOG) is not a well-formed formula in #$stevereedChatMt.
13:44:12 <CycLBot> Perhaps #$disjointWith is insufficiently defined in mt #$stevereedChatMt.")
13:44:26 <Taral> lovely
13:45:15 <stevereed> subl: (cyc-query '(#$disjointWith #$Dog ?not-a-dog) #$InferencePSC)
13:45:19 <CycLBot> (?NOT-A-DOG . SingleCellOrganism)
13:45:20 <CycLBot> (?NOT-A-DOG . Plant)
13:45:21 <CycLBot> (?NOT-A-DOG . Reptile)
13:45:22 <CycLBot> (?NOT-A-DOG . Amphibian)
13:45:23 <CycLBot> (?NOT-A-DOG . Arthropod)
13:45:24 <CycLBot> (?NOT-A-DOG . ProtistaKingdom)
13:45:25 <CycLBot> (?NOT-A-DOG . Bird)
13:45:26 <CycLBot> (?NOT-A-DOG . Primate)
13:45:27 <CycLBot> (?NOT-A-DOG . FelidaeFamily)
13:45:29 <CycLBot> (?NOT-A-DOG . Fungus)
13:45:30 <CycLBot> (?NOT-A-DOG . AquaticOrganism)
13:45:32 <CycLBot> (?NOT-A-DOG . Omnivore)
13:45:34 <CycLBot> (?NOT-A-DOG . Herbivore)
13:45:35 <Taral> oh, sheesh.
13:45:36 <CycLBot> (?NOT-A-DOG . MicroscopicScaleObject)
13:45:38 <CycLBot> (?NOT-A-DOG . Cell)
13:45:40 <CycLBot> (?NOT-A-DOG . Poikilotherm)
13:45:42 <CycLBot> (?NOT-A-DOG . (GroupFn Agent-Generic))
13:45:53 <Taral> I hope that's it.
13:46:07 <stevereed> not trivial, disjointness is commonsense reasoning
13:46:24 <stevereed> you can shut off CycLBot with a period
13:46:33 <stevereed> dmiles wrote it
13:47:23 <Taral> it's neat
13:47:30 <Taral> but it's still only the upper ontology
13:47:50 <stevereed> yes, more will come in subsequent releases
13:48:32 <Taral> *nod*
13:49:35 <stevereed> ten times more terms
13:49:47 <stevereed> ten times more axioms about them
13:49:51 <Taral> YAY!
13:49:56 <Taral> Is there another download site?
13:50:00 <Taral> prdownloads.sourceforge.net is SLOW
13:50:07 <stevereed> how slow
13:50:07 <Taral> (15K/s)
13:50:19 <stevereed> Graham can give our backup site
13:50:46 <stevereed> if no answer here, email to reed@cyc.com and i'll get it for you from Graham.
13:51:26 <stevereed> sourceforge is somewhat faster at night, and on weekends
13:51:28 <Graham> opencyc.ayspex.org/
13:51:55 <Graham> should be much faster
13:55:36 <Taral> no such domain
13:55:57 <stevereed> spelling error Graham?
13:56:27 <Graham> oops
13:56:29 <Graham> yeah
13:56:50 <Graham> http://opencyc.auspex.org/
13:57:05 <Graham> sorry
13:57:16 <Taral> YAY
13:57:58 <Taral> much aster
13:58:00 <Taral> er, faster
14:00:48 <Taral> so when is this next release? :)
14:06:19 <Taral> and what does a yellow M mean in the web interface?
14:10:11 <dmiles> M : Assertion has meta-assertions stated about it. Click on the icon link (colored ball) to display the assertion and see a list of the meta-assertions. 
14:10:26 <Taral> ah
14:10:54 <Taral> and it's a shame the wordnet interface doesn't display a gloss in the search results list. (Type poison, and get two answers -- you have to click them to see which one you want.)
14:11:00 <dmiles> here is a guide to other ones: http://www.cyc.com/cycdoc/help/browser-icon-key.html
14:12:28 <Taral> thx
14:14:57 <dmiles> Steve, what is the java coposition of the Dotted lists in the answer:  (?NOT-A-DOG . Arthropod) ?
14:16:22 <dmiles> i thought it maybe was an ArrayList()  !isProper() with size==2 ?
14:19:08 <dmiles> replace what i siad with a CycList
14:24:43 <stevereed> should be CycList
14:24:59 <stevereed> composed of CycLists
14:25:13 <stevereed> and each of those is an improper list
14:25:36 <stevereed> for example (?NOT-A-DOG . Arthropod)
14:26:06 <stevereed> is an improper CycList (lisp dotted pair)
14:26:20 <stevereed> first() and rest() are the accessors.
14:26:44 <dmiles> .rest() instanseof CycConstant in that case?
14:26:48 <stevereed> CycList extends ArrayList
14:26:58 <stevereed> correct instanceof ..
14:27:13 <stevereed> first() instanceof CycVariable
14:27:23 <stevereed> this is how it should be..
14:27:27 <stevereed> if not --- bug
14:27:36 <dmiles> oops, i was tryi9ng to access via second() :P
14:27:52 <stevereed> that needs proper list
14:27:57 <stevereed> (A B)
14:28:01 <stevereed> not (A . B)
14:28:35 <dmiles> makes sense..
14:29:03 <stevereed> On wordnet we did not import the gloss
14:29:14 <dmiles> so reset() if inproper is help outside the internal ArrayList() ?
14:29:22 <dmiles> err
14:29:28 <dmiles> rest()
14:29:39 <stevereed> yes
14:29:48 <stevereed> see the implementation of CycList
14:29:55 <stevereed> it extends ArrayList
14:29:57 <stevereed> and has an
14:30:04 <Taral> wordnet didn't import the gloss?
14:30:07 <stevereed> instance variable for the . part
14:30:19 <stevereed> right
14:30:21 <Taral> It showed it to me when I clicked the synset
14:30:28 <dmiles> ok, have it understood
14:30:29 <stevereed> whoops im wrong
14:30:51 <stevereed> what behavior did you want,  to see the gloss on the content pane?
14:31:07 <stevereed> that is the main panel for term definition
14:33:46 <Taral> nono
14:33:49 <Taral> er, hold on.
14:34:26 <Taral> have to load cyc again
14:34:58 <Taral> After search for a word and several possible synsets for that word are found, it displays a page with the words and links to the main panel for each term def.
14:35:20 <Taral> On that page (the search result page), I'd like to see the gloss (and maybe the whole synset)
14:35:24 <Taral> e.g. "posion"
14:35:27 <Taral> er, poison
14:36:55 <Taral> (the url is cg?handle-wn-to-cyc-specify)
14:37:11 <Taral> okay, so it shows the whole synset already
14:37:14 <Taral> but the gloss would be cool.
14:37:17 <Taral> (and useful)
14:45:14 --- join: IRCMonkey (~chatzilla@207.207.8.151) joined #opencyc
14:47:27 --- quit: IRCMonkey (Remote closed the connection)
14:57:14 --- quit: CycLBot (Remote closed the connection)
14:58:02 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
14:58:23 <dmiles> query: (isa ?X Cyclist)
14:58:23 <CycLBot> ?X = (), ?X = (), ?X = (), ?X = ()
14:58:44 <Taral> heh
14:58:53 <dmiles> almost ;)
15:05:07 --- quit: CycLBot (Remote closed the connection)
15:05:40 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
15:05:43 <dmiles> query: (isa ?X Cyclist)
15:05:48 <CycLBot> ?X = (), ?X = (), ?X = (), ?X = ()
15:07:02 <Taral> nope
15:07:03 <Taral> :)
15:08:47 <dmiles> its acting like in  (A . B) .. rest().isEmpty()==true
15:15:22 <dmiles> ok looks like maybe a small bug
15:19:19 --- quit: CycLBot (Remote closed the connection)
15:19:45 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
15:20:02 <dmiles> query: (isa ?X Cyclist)
15:20:03 <CycLBot> (?X . Guest), (?X . NLReviewer), (?X . Cyc), (?X . CycAdministrator)
15:21:33 <dmiles> bsh: ircbot.paraphrased.removeA()
15:21:33 <CycLBot> Sourced file: <Inline eval of: ircbot.paraphrased.removeA(); > : Error in method invocation: No args method removeA() no
15:21:34 <CycLBot> t found in class'java.util.ArrayList' : at Line: 1 : in file: <Inline eval of: ircbot.paraphrased.removeA(); > : ircbot .paraphrase
15:21:35 <CycLBot> d .removeA ( )
15:21:37 <dmiles> bsh: ircbot.paraphrased.removeAll()
15:21:38 <CycLBot> Sourced file: <Inline eval of: ircbot.paraphrased.removeAll(); > : Error in method invocation: No args method removeAll(
15:21:38 <CycLBot> ) not found in class'java.util.ArrayList' : at Line: 1 : in file: <Inline eval of: ircbot.paraphrased.removeAll(); > : ircbo
15:21:39 <CycLBot> t .paraphrased .removeAll ( )
15:22:12 <dmiles> bsh: ircbot.paraphrased.getClass()
15:22:13 <CycLBot> class java.util.ArrayList
15:22:41 <dmiles> bsh: ircbot.paraphrased.getClass()=new ArrayList()
15:22:41 <CycLBot> Sourced file: <Inline eval of: ircbot.paraphrased.getClass()=new ArrayList(); > unknown error: null : at Line: 1 : in file
15:22:42 <CycLBot> : <Inline eval of: ircbot.paraphrased.getClass()=new ArrayList(); > : ircbot .paraphrased .getClass ( ) = new ArrayList 
15:22:42 <CycLBot> ( )
15:27:30 <dmiles> paraphrase: (isa Cyc Cyclist)
15:27:31 <CycLBot> (isa Cyc Cyclist)
15:28:56 --- quit: Taral ("FOOD")
15:29:26 --- quit: CycLBot (Remote closed the connection)
15:30:22 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
15:30:24 <dmiles> paraphrase: (isa Cyc Cyclist)
15:30:31 <CycLBot> (isa Cyc Cyclist)
15:34:55 --- quit: CycLBot (Remote closed the connection)
15:35:49 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
15:36:39 --- quit: CycLBot (Remote closed the connection)
15:37:18 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
15:38:36 <dmiles>  paraphrase: (isa Cyc Cyclist)
15:38:37 <CycLBot> Cyc processes are cyclists
15:39:02 <dmiles> query: (isa ?X Cyclist)
15:39:03 <CycLBot> (?X . Guest), (?X . NLReviewer), (?X . Cyc), (?X . CycAdministrator)
15:39:31 <dmiles> query: (isa ?X Thing)
15:39:31 <CycLBot> NIL
15:39:46 <dmiles> query: (genls ?X Thing)
15:39:51 <CycLBot> Your question returned 2964 answers .. please refine. (here are the first five)
15:39:52 <CycLBot> (?X . TestingConstant)
15:39:53 <CycLBot> (?X . AttributePointValue)
15:39:54 <CycLBot> (?X . GenericAttribute)
15:39:55 <CycLBot> (?X . ColorTingeAttribute)
15:39:56 <CycLBot> (?X . LocationStateAttribute)
15:43:38 --- quit: CycLBot (Remote closed the connection)
15:44:16 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
15:45:13 <dmiles> query: (isa ?X Cyclist)
15:45:14 <CycLBot> ?X = an empty list , ?X = an empty list , ?X = an empty list , ?X = an empty list
15:46:24 <dmiles> hrrm .rest() on a dotted par is retuning a an empty CycList
15:47:00 <dmiles> 		if ( !((CycList)post).isProperList() )
15:47:00 <dmiles> 		    return attemptParaphrase(((CycList)post).first()) 
15:47:00 <dmiles> 		    + " = " + attemptParaphrase(((CycList)post).rest());
15:48:09 <dmiles> looking at CycList() now
15:54:30 <dmiles> Steve, interesting..
15:54:32 <dmiles>         CycList cycList = new CycList(this);
15:54:38 <dmiles> inside rest()
15:55:05 <dmiles> i wonder if its caller the CycList(CVollection) or CycList(Object) constructer
15:57:18 <dmiles> if its callaling collection .. it wont be working
15:58:21 <dmiles> sorry had that wrong, if its calling Object it wont be working
15:59:21 --- quit: deltab (Read error: 104 (Connection reset by peer))
15:59:48 <dmiles> or maybe your doing somnething trickier
16:01:21 <dmiles> but what is happening is a small bug that .rest().isEmpty is true on (A . B) and .rest() always returbs CycList()
16:02:14 <dmiles> this makes B very hard to get at
16:04:24 * dmiles is running off to the store.. but will read when gets back
16:14:22 --- join: Don (Don@ip-216-23-48-150.adsl.one.net) joined #opencyc
16:14:35 <stevereed> OK, I'll look at that bug.  If I wrote a method to parse binding lists.
16:14:46 <stevereed> what would you want returned? 
16:15:28 <stevereed> the dotted pairs made into proper lists inside of a CycList?
16:16:07 <stevereed> I plan on fixing the rest() bug so that it returns the dotted element if the list is an
16:16:11 <stevereed> improper list.
16:16:50 <stevereed> When I get done I'll upload org.opencyc.cycobject.CycList to SourceForge CVS
16:17:28 <stevereed> got to go myself, I wonder if you have tried checking out the java sources from SourceForge?
16:52:17 * dmiles returned
16:52:33 <dmiles> well in the casse of imporoper lists..
16:53:39 <dmiles> first, i really like the use of ArrayList().. much cleaner then car/cdr ing your way though elements
16:54:33 <dmiles> to understand what an imporoper list is in the class if would see its size==2 and then improper list flag is set
16:55:06 <dmiles> then i would wants to get rest() from second()
16:55:51 <dmiles> well virtually second only in the contexrt of an ArrayList stored list
16:57:00 <dmiles> so since CycList is a very nice ArrayList with featurs needed.. the rest i see is all but the first()
16:57:41 <dmiles> that however in the case of a proper list is a new Array list
16:57:55 <dmiles> err new CycList
16:58:28 <dmiles> but with an improper list it could be a CycConstant() CycSymbol() or Anything Object
16:59:58 <dmiles> refering to rest()
17:00:29 <dmiles> if rest() is supposed to return 'cdr'
17:00:51 <dmiles> (that was my interpretation)
17:01:05 <dmiles> subl: (cdr '(A . B))
17:01:05 <CycLBot> B
17:01:15 <dmiles> subl: (cdr '(A B C))
17:01:17 <CycLBot> the symbol B the symbol C
17:01:39 <dmiles> noparaphrase #opencyc
17:01:43 <dmiles> subl: (cdr '(A B C))
17:01:44 <CycLBot> (B C)
17:02:15 <dmiles> subl: (cdr '(A B))
17:02:15 <CycLBot> (B)
17:03:54 <dmiles> i would think .rest() would only return a CycList if it was a properlist
17:05:10 <dmiles> oh i was wrong about being length 2 if it was impropmer
17:05:41 <dmiles> (A B C . D)
17:06:16 <dmiles> just as imporoper
17:07:24 --- join: mea_away (~mea_culpa@12-225-207-235.client.attbi.com) joined #opencyc
17:07:36 --- join: DougMiles (~alife@12-225-207-235.client.attbi.com) joined #opencyc
17:07:38 --- quit: dmiles (Read error: 104 (Connection reset by peer))
17:07:46 --- quit: mea_culpa (Read error: 104 (Connection reset by peer))
17:09:09 <DougMiles> (A B C . D)
17:09:35 <DougMiles> if .size()==4 ? + isProper==false ?
17:10:06 <DougMiles> .rest() == (B C . D) ?
17:11:28 <DougMiles> the goal of CycList seems to be emulating a lisp cons structure in a very usefull subclass of ArrayList()
17:13:23 <DougMiles> so .rest()  if (inproper) return this.get(this.size()-!);
17:13:36 <DougMiles> err -1
17:17:12 --- part: Don left #opencyc
17:20:50 <DougMiles> yes have checked out whole CVS :> .. but that was a a while before version 0.6 came out
17:21:02 <DougMiles> (the java stuff )
18:02:15 <DougMiles> looks like i was out of data on some CVS file
18:02:25 --- nick: DougMiles -> dmiles
18:51:43 --- join: markwattier (~mark@apx1-05-121.pdx.du.teleport.com) joined #opencyc
18:52:20 <markwattier> I have a question about the syntax for cyc-query: How do you specify
18:52:29 <markwattier> the parameters for the properties, like backchaining, number of bindings, etc?
18:52:35 <markwattier> An example would help.
18:52:44 <markwattier> The example in that document uses FI-ASK, which the document says is deprecated.
18:55:39 <dmiles> i am looking.. but someone in here my know of hand
18:55:50 <dmiles> err may know off hand
18:58:42 <dmiles> ok here is one option..
18:58:44 <dmiles> (without-wff-semantics (cyc-query '(#$isa ?W #$Microtheory) #$BaseKB))
18:59:16 <dmiles> doesnt type check before query
18:59:56 <markwattier> I don't see without-wff-semantics in the doc at all. Where do you get this from?
19:00:11 <dmiles> from java code in CVS
19:00:34 <markwattier> I am using the telnett interface. I will re-learn java later...
19:00:46 <dmiles> there are some other params you can use cset on..
19:01:09 <markwattier> I am looking at the document at http://www.opencyc.org/doc/cycapi
19:01:43 --- quit: bruce ("[BX] Silly wabbit, BitchX is for kids!")
19:01:56 * stevereed_home is back (gone 23:33:48)
19:02:01 <stevereed_home> mark,
19:02:13 <stevereed_home> on the www.opencyc.org web site, api docs ...
19:02:17 <stevereed_home> CYC-QUERY : (sentence &optional mt properties)
19:02:17 <stevereed_home> Query for bindings for free variables which will satisfy SENTENCE within MT.
19:02:17 <stevereed_home> ;;;{{{DOC
19:02:17 <stevereed_home> Properties: :backchain NIL or an integer or T
19:02:17 <stevereed_home> :number NIL or an integer
19:02:18 <stevereed_home> :time NIL or an integer
19:02:20 <stevereed_home> :depth NIL or an integer
19:02:22 <stevereed_home> :conditional-sentence boolean
19:02:32 <stevereed_home> the optional parms,
19:02:38 <stevereed_home> give the backchaining depth,
19:02:49 <stevereed_home> number of bindings cuttoff
19:02:56 <dmiles> uppercase on the doc
19:02:56 <stevereed_home> and max elapsed time.
19:02:59 <markwattier> Yes, that's the one 
19:03:10 <stevereed_home> we can try some examples here
19:03:36 <stevereed_home> doug, do you pass all parms to cyc-query?
19:03:39 <dmiles> noparaphrase: #opencyc
19:03:55 <dmiles> not in this case
19:04:00 <stevereed_home> ok then i
19:04:06 <stevereed_home> do it from subl
19:04:10 <stevereed_home> ok?
19:04:33 <dmiles> should work, markwattier since you are interested dirrectly in telnet
19:04:49 <dmiles> so subl: is the same
19:04:57 <markwattier> When you are using telnet, are you really speaking SubL?
19:05:03 <stevereed_home> yes
19:05:15 <stevereed_home> direct into the interpreter
19:05:21 <stevereed_home> same as command line
19:05:27 <markwattier> OK, I thought so.
19:05:34 <stevereed_home> we have a special interpreter,
19:05:38 <stevereed_home> for open cyc
19:05:44 <stevereed_home> that guards the system,
19:05:53 <stevereed_home> and whose behavior will be exposed by the
19:05:59 <stevereed_home> upcoming security model
19:06:13 <stevereed_home> so you can say which functions are legal.
19:06:29 <stevereed_home> cyc has say 10,000 functions,
19:06:42 <stevereed_home> and we expose about 400 top level ones in the api now.
19:07:01 <stevereed_home> more to come when the rkf (knowledge acquisition tools),
19:07:07 <stevereed_home> come into the build (rel 1.0)
19:07:27 <stevereed_home> the api are those functions that will stay backwards compatible.
19:07:42 <stevereed_home> lower level function definitions change all the time, daily.
19:07:56 <stevereed_home> ok ready for examples...
19:08:04 <markwattier> Yes
19:08:08 <stevereed_home> simple at first,
19:08:15 <stevereed_home> then use of each optional parm
19:08:23 <stevereed_home> 1. if you leave all parms off..
19:08:56 <stevereed_home> the defaults are: BaseKB for inference (not much there except logical truth) ,,
19:09:08 <stevereed_home> things that are always true in every context.
19:09:47 <markwattier> Yes, I have done this, but with EverythingPSC specified
19:09:51 <stevereed_home> subl: (cyc-query '(#$isa #$Collection ?what-collection))
19:09:51 <markwattier> for the mt
19:10:30 <dmiles> subl: (cyc-query '(#$isa #$Collection ?what-collection) )
19:10:49 <stevereed_home> i make a mistake?
19:10:51 <dmiles> one sec;P
19:11:12 --- quit: CycLBot (Read error: 104 (Connection reset by peer))
19:11:31 <stevereed_home> ok mt is not optional
19:12:03 <dmiles> oh that was it
19:12:11 <stevereed_home> is bot back up?
19:12:21 <dmiles> on it's way
19:12:36 <stevereed_home> sorry, i'll try each example on my command line first
19:15:33 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
19:16:00 <dmiles> subl: (cyc-query '(#$isa #$Collection ?what-collection) #$InferencePSC )
19:16:02 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:02 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:04 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:04 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:06 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:07 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:08 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:09 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:10 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:11 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:12 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:14 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:15 <dmiles> .
19:16:16 <dmiles> .
19:16:16 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:18 <CycLBot> ?WHAT-COLLECTION = an empty list
19:16:24 <dmiles> noparaphrase: #opencyc
19:16:30 <dmiles> subl: (cyc-query '(#$isa #$Collection ?what-collection) #$InferencePSC )
19:16:31 <CycLBot> ((?WHAT-COLLECTION . CycLReifiableDenotationalTerm))
19:16:32 <CycLBot> ((?WHAT-COLLECTION . CycLReifiedDenotationalTerm))
19:16:32 <CycLBot> ((?WHAT-COLLECTION . HLReifiedDenotationalTerm))
19:16:33 <CycLBot> ((?WHAT-COLLECTION . ELExpression))
19:16:33 <CycLBot> ((?WHAT-COLLECTION . CycLClosedDenotationalTerm))
19:16:34 <CycLBot> ((?WHAT-COLLECTION . CycLClosedAtomicTerm))
19:16:34 <CycLBot> ((?WHAT-COLLECTION . CycLRepresentedTerm))
19:16:36 <CycLBot> ((?WHAT-COLLECTION . CycLRepresentedAtomicTerm))
19:16:38 <CycLBot> ((?WHAT-COLLECTION . CycLDenotationalTerm))
19:16:40 <CycLBot> ((?WHAT-COLLECTION . CycLAtomicTerm))
19:16:42 <CycLBot> ((?WHAT-COLLECTION . HLExpression))
19:16:44 <CycLBot> ((?WHAT-COLLECTION . SubLExpression))
19:16:46 <CycLBot> ((?WHAT-COLLECTION . CycLTerm))
19:16:48 <CycLBot> ((?WHAT-COLLECTION . CycLExpression))
19:16:50 <CycLBot> ((?WHAT-COLLECTION . CycLClosedExpression))
19:16:52 <CycLBot> ((?WHAT-COLLECTION . CycLIndexedTerm))
19:16:54 <CycLBot> ((?WHAT-COLLECTION . HLIndexedTerm))
19:16:56 <CycLBot> ((?WHAT-COLLECTION . CycLConstant))
19:16:57 <dmiles> .
19:16:58 <CycLBot> ((?WHAT-COLLECTION . PublicConstant))
19:17:00 <CycLBot> ((?WHAT-COLLECTION . CoreConstant))
19:17:02 <CycLBot> ((?WHAT-COLLECTION . VariableOrderCollection))
19:17:04 <CycLBot> ((?WHAT-COLLECTION . Collection))
19:17:06 <CycLBot> ((?WHAT-COLLECTION . Thing))
19:17:06 <dmiles> .
19:17:08 <CycLBot> ((?WHAT-COLLECTION . PartiallyIntangible))
19:17:10 <CycLBot> ((?WHAT-COLLECTION . Intangible))
19:17:12 <CycLBot> ((?WHAT-COLLECTION . MathematicalOrComputationalThing))
19:17:14 <CycLBot> ((?WHAT-COLLECTION . MathematicalThing))
19:17:16 <CycLBot> ((?WHAT-COLLECTION . SetOrCollection))
19:17:18 <CycLBot> ((?WHAT-COLLECTION . SetOrCollectionType))
19:17:20 <CycLBot> ((?WHAT-COLLECTION . CollectionType))
19:17:26 <stevereed_home> ok
19:17:41 <stevereed_home> 2. no backchain, 1 answer only
19:18:43 <stevereed_home> a moment while i get my example to work.
19:22:51 <stevereed_home> trouble with arguments not matching the api doc comment... so i'll be back in a few minutes.
19:25:07 <stevereed_home> on the right track now, the arguments have keyword parms ... trying again 
19:27:11 <stevereed_home> ok, here is cyc-query with number cuttoff set to one binding.
19:27:14 <stevereed_home> (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 1))
19:27:22 <stevereed_home> whoops need the bot.
19:27:30 <stevereed_home> subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 1))
19:27:31 <CycLBot> (((?WHAT-COLLECTION . CollectionType)))
19:27:42 <stevereed_home> say three bindings.
19:27:47 <markwattier> OK, I see what I was doing differently
19:27:58 <stevereed_home> subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 3))
19:27:59 <CycLBot> ((?WHAT-COLLECTION . SetOrCollection))
19:27:59 <CycLBot> ((?WHAT-COLLECTION . SetOrCollectionType))
19:28:00 <CycLBot> ((?WHAT-COLLECTION . CollectionType))
19:28:28 <stevereed_home> we dont have many backchaining rules in this release but this is how to perform them.
19:30:01 <stevereed_home> subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:backchain 1))
19:30:02 <CycLBot> ((?WHAT-COLLECTION . CycLReifiableDenotationalTerm))
19:30:03 <CycLBot> ((?WHAT-COLLECTION . CycLReifiedDenotationalTerm))
19:30:03 <CycLBot> ((?WHAT-COLLECTION . HLReifiedDenotationalTerm))
19:30:04 <CycLBot> ((?WHAT-COLLECTION . ELExpression))
19:30:04 <CycLBot> ((?WHAT-COLLECTION . CycLClosedDenotationalTerm))
19:30:05 <CycLBot> ((?WHAT-COLLECTION . CycLClosedAtomicTerm))
19:30:05 <CycLBot> ((?WHAT-COLLECTION . CycLRepresentedTerm))
19:30:07 <CycLBot> ((?WHAT-COLLECTION . CycLRepresentedAtomicTerm))
19:30:08 <stevereed_home> there will be 30
19:30:09 <CycLBot> ((?WHAT-COLLECTION . CycLDenotationalTerm))
19:30:11 <CycLBot> ((?WHAT-COLLECTION . CycLAtomicTerm))
19:30:13 <CycLBot> ((?WHAT-COLLECTION . HLExpression))
19:30:15 <CycLBot> ((?WHAT-COLLECTION . SubLExpression))
19:30:17 <CycLBot> ((?WHAT-COLLECTION . CycLTerm))
19:30:19 <CycLBot> ((?WHAT-COLLECTION . CycLExpression))
19:30:21 <CycLBot> ((?WHAT-COLLECTION . CycLClosedExpression))
19:30:23 <CycLBot> ((?WHAT-COLLECTION . CycLIndexedTerm))
19:30:25 <CycLBot> ((?WHAT-COLLECTION . HLIndexedTerm))
19:30:27 <CycLBot> ((?WHAT-COLLECTION . CycLConstant))
19:30:29 <CycLBot> ((?WHAT-COLLECTION . PublicConstant))
19:30:31 <CycLBot> ((?WHAT-COLLECTION . CoreConstant))
19:30:33 <CycLBot> ((?WHAT-COLLECTION . VariableOrderCollection))
19:30:35 <CycLBot> ((?WHAT-COLLECTION . Collection))
19:30:37 <CycLBot> ((?WHAT-COLLECTION . Thing))
19:30:39 <CycLBot> ((?WHAT-COLLECTION . PartiallyIntangible))
19:30:41 <CycLBot> ((?WHAT-COLLECTION . Intangible))
19:30:43 <CycLBot> ((?WHAT-COLLECTION . MathematicalOrComputationalThing))
19:30:45 <CycLBot> ((?WHAT-COLLECTION . MathematicalThing))
19:30:47 <CycLBot> ((?WHAT-COLLECTION . SetOrCollection))
19:30:49 <CycLBot> ((?WHAT-COLLECTION . SetOrCollectionType))
19:30:51 <CycLBot> ((?WHAT-COLLECTION . CollectionType))
19:30:56 <stevereed_home> we ordinarily backchain no deeper than 3 because of combinatorial explosion, but there
19:31:15 <stevereed_home> are cases where inference path can go much deeper with hints.
19:31:29 <stevereed_home> ok lets try time
19:32:23 <stevereed_home> subl: (cyc-query '(#$isa #$Collection ?what-collection) #$InferencePSC '(:time 1))
19:32:24 <CycLBot> ((?WHAT-COLLECTION . CycLReifiableDenotationalTerm))
19:32:24 <CycLBot> ((?WHAT-COLLECTION . CycLReifiedDenotationalTerm))
19:32:25 <CycLBot> ((?WHAT-COLLECTION . HLReifiedDenotationalTerm))
19:32:26 <CycLBot> ((?WHAT-COLLECTION . ELExpression))
19:32:26 <CycLBot> ((?WHAT-COLLECTION . CycLClosedDenotationalTerm))
19:32:26 <CycLBot> ((?WHAT-COLLECTION . CycLClosedAtomicTerm))
19:32:27 <CycLBot> ((?WHAT-COLLECTION . CycLRepresentedTerm))
19:32:29 <CycLBot> ((?WHAT-COLLECTION . CycLRepresentedAtomicTerm))
19:32:31 <CycLBot> ((?WHAT-COLLECTION . CycLDenotationalTerm))
19:32:33 <CycLBot> ((?WHAT-COLLECTION . CycLAtomicTerm))
19:32:35 <CycLBot> ((?WHAT-COLLECTION . HLExpression))
19:32:37 <CycLBot> ((?WHAT-COLLECTION . SubLExpression))
19:32:39 <CycLBot> ((?WHAT-COLLECTION . CycLTerm))
19:32:41 <CycLBot> ((?WHAT-COLLECTION . CycLExpression))
19:32:43 <CycLBot> ((?WHAT-COLLECTION . CycLClosedExpression))
19:32:45 <CycLBot> ((?WHAT-COLLECTION . CycLIndexedTerm))
19:32:47 <CycLBot> ((?WHAT-COLLECTION . HLIndexedTerm))
19:32:49 <CycLBot> ((?WHAT-COLLECTION . CycLConstant))
19:32:51 <CycLBot> ((?WHAT-COLLECTION . PublicConstant))
19:32:53 <CycLBot> ((?WHAT-COLLECTION . CoreConstant))
19:32:55 <CycLBot> ((?WHAT-COLLECTION . VariableOrderCollection))
19:32:57 <CycLBot> ((?WHAT-COLLECTION . Collection))
19:32:59 <CycLBot> ((?WHAT-COLLECTION . Thing))
19:33:01 <CycLBot> ((?WHAT-COLLECTION . PartiallyIntangible))
19:33:03 <CycLBot> ((?WHAT-COLLECTION . Intangible))
19:33:05 <CycLBot> ((?WHAT-COLLECTION . MathematicalOrComputationalThing))
19:33:05 <dmiles> still will easdily get all 30.. since infernce is ran before the delayed printer
19:33:07 <CycLBot> ((?WHAT-COLLECTION . MathematicalThing))
19:33:09 <CycLBot> ((?WHAT-COLLECTION . SetOrCollection))
19:33:11 <CycLBot> ((?WHAT-COLLECTION . SetOrCollectionType))
19:33:12 <CycLBot> ((?WHAT-COLLECTION . CollectionType))
19:34:28 <stevereed_home> yeh, so keywords :number, :time and :backchain were demoed.
19:34:43 <stevereed_home> if you try,
19:34:56 <dmiles> on backchaining: cyc makes deductions durring assertion time so even though the backchianing is set low it doesn't mean that a rule wasn't used
19:35:15 <stevereed_home> correct.
19:35:15 <dmiles> (if i am correct)
19:35:41 <stevereed_home> forward chaining (per rule at assert time)..
19:35:52 <stevereed_home> asserts facts that you later just look up...
19:36:13 <stevereed_home> when you assert a rule you say whether it is forward or backward
19:36:23 <stevereed_home> the great majority of rules are backward
19:36:36 <stevereed_home> or rules are made forward for a one-time propagation.
19:36:38 <dmiles> that is a hard descission to sometimes make 
19:36:47 <stevereed_home> try backwards first
19:36:52 <stevereed_home> then if queries are slow
19:37:03 <stevereed_home> you can go forwards to precache answers
19:37:17 <stevereed_home> but forward inference can conclude lots and lots..
19:37:28 <stevereed_home> of uninteresting facts.
19:37:37 <dmiles> yes just as combinatoric
19:37:41 <stevereed_home> right.
19:37:59 <stevereed_home> we cover most of this in the doc / tutorials.
19:38:24 <stevereed_home> I need to get to that java bug fix on .rest().  OK?
19:38:44 <dmiles> yeah.. so you see it might return Object?
19:38:52 <markwattier> My question is answered, thanks!
19:39:23 <stevereed_home> ok, just did the cvs update, now will code the fix and unit test.
19:41:45 <dmiles> vs server: Updating .
19:41:45 <dmiles> U CycList.java
19:42:04 <dmiles> well i rm'd the other first
19:42:19 <dmiles> isa the changed in rest() itself?
19:43:43 <dmiles> oh .. updated.. i thought yousaid commit (excuse me)
19:45:22 --- part: markwattier left #opencyc
20:00:02 <stevereed_home> i'm done and tested .. but without a local cyc connection... i'll do that in the am.
20:00:09 <stevereed_home> the change is,
20:00:17 <stevereed_home> in CycList.rest() alone,
20:00:34 <stevereed_home> but I changed the method signature from CycList to Object.
20:00:39 <stevereed_home> so lots of code changed.
20:00:50 <stevereed_home> I'll run the unit tests in the am.
20:00:55 <dmiles> ah good
20:00:58 <stevereed_home> but i did test it on a dotted pair.
20:01:22 <stevereed_home> if you pick up org.opencyc.cycobject.CycList from sourceforge cvs it should be good.
20:01:45 <stevereed_home> but expect compile errors because of the signature change.
20:01:49 <dmiles> cvs server: Updating .
20:01:49 <dmiles> P CycList.java
20:01:49 <dmiles> P CycNart.java
20:01:49 <dmiles> U UnitTest.java
20:02:00 <stevereed_home> I fixed all the rest of the code via:
20:02:23 <stevereed_home> old: CycList myRest = someList.rest();
20:02:41 <stevereed_home> new: CycList myRest = (CycList) someList.rest();  // expecting list
20:03:05 <dmiles> yeah.. should work
20:03:05 <stevereed_home> new: Object myRest = someList.rest(); // expecting anything and maybe dotted pair.
20:03:32 <dmiles> you always could have a method called CycList tail()
20:03:32 <stevereed_home> ok done and to bed... any problems please leave them...
20:03:43 <stevereed_home> same behavior as rest?
20:03:58 <stevereed_home> is this prolog?
20:04:20 <dmiles> wei figured it was done in case you have something that was itterating though always expecting lists
20:04:48 <dmiles> i thought the always return a proper list was maybe something needed.. (somewhere in your code)
20:04:50 <stevereed_home> ok, I can make that method too.  I'll check the SubL tail code.
20:05:48 <dmiles> btw: i wanted to compliment you on the use of ArrayList()
20:06:15 <dmiles> its so much better the the way most java lisps use cons.. where last is hard to get at
20:06:24 <dmiles> then the way
20:07:41 <dmiles> by having at a collection (the way you have it) you get do much more .. shuffle,sort etc ;P
20:08:24 <stevereed_home> well Cyc stopped using dotted pairs for much a long time ago.
20:08:55 <stevereed_home> internally Cyc uses vector style objects for lists (nearly always proper)
20:09:26 <stevereed_home> ok so tomorrow i look at tail and see what we have.
20:09:29 <stevereed_home> bye
20:10:08 <dmiles> yes.. its better to have a hash based on length that way (vector length) can easily decide if a match is possible
20:10:32 <dmiles> (i mean by internally ussing vectors)
20:10:42 <dmiles> thats what prolog does 
20:12:01 <dmiles> g'night
20:12:18 <dmiles> thank you much for getting this fixed this quickly
20:27:24 --- quit: CycLBot (Remote closed the connection)
20:38:14 --- join: mea_culpa (~mea_culpa@12-225-207-235.client.attbi.com) joined #opencyc
20:38:14 --- quit: mea_away (Read error: 104 (Connection reset by peer))
20:42:23 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
20:42:23 <CycLBot> I am initializing
20:42:25 <CycLBot> I am ready to chat
20:43:08 <dmiles>  subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 3))
20:43:09 <CycLBot> ((?WHAT-COLLECTION . SetOrCollection))
20:43:11 <CycLBot> ((?WHAT-COLLECTION . SetOrCollectionType))
20:43:11 <CycLBot> ((?WHAT-COLLECTION . CollectionType))
20:44:01 <dmiles> ask: (isa ?W Cyclist)
20:44:02 <CycLBot> (((?W . Cyc)))
20:49:27 <dmiles> query: (isa ?W Cyclist)
20:49:28 <CycLBot> (((?W . CycAdministrator)) ((?W . Guest)) ((?W . NLReviewer)) ((?W . Cyc)))
21:06:34 <dmiles> query: (isa ?W Cyclist)
21:06:35 <CycLBot> (((?W . CycAdministrator)) ((?W . Guest)) ((?W . NLReviewer)) ((?W . Cyc)))
21:07:01 <dmiles> paraphrase: #opencyc
21:07:04 <dmiles> query: (isa ?W Cyclist)
21:07:04 <CycLBot> (((?W . CycAdministrator)) ((?W . Guest)) ((?W . NLReviewer)) ((?W . Cyc)))
21:08:27 <dmiles> paraphrase: (?W . Guest)
21:11:38 --- quit: CycLBot (Remote closed the connection)
21:12:18 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
21:12:18 <CycLBot> I am initializing
21:12:20 <CycLBot> I am ready to chat
21:12:26 <dmiles> paraphrase: (?W . Guest)
21:12:28 <dmiles> query: (isa ?W Cyclist)
21:12:29 <CycLBot> (((?W . CycAdministrator)) ((?W . Guest)) ((?W . NLReviewer)) ((?W . Cyc)))
21:29:40 --- join: mea_away (~mea_culpa@12-225-207-235.client.attbi.com) joined #opencyc
21:29:40 --- quit: mea_culpa (Read error: 104 (Connection reset by peer))
21:29:52 --- join: DougMiles (~alife@12-225-207-235.client.attbi.com) joined #opencyc
21:30:01 --- quit: dmiles (Read error: 104 (Connection reset by peer))
21:30:12 --- nick: DougMiles -> dmiles
21:33:44 --- quit: CycLBot (Remote closed the connection)
21:38:10 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
21:38:11 <CycLBot> I am initializing
21:38:11 <CycLBot> I am ready to chat
21:38:34 <dmiles> query: (isa ?W Cyclist)
21:38:35 <CycLBot> ?W = Cyc administrator, ?W = Guest, ?W = NL Reviewer, ?W = Cyc process
21:39:00 <dmiles>  subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 3))
21:39:02 <CycLBot> ?WHAT-COLLECTION = intensional or extensional set
21:39:03 <CycLBot> ?WHAT-COLLECTION = set or collection type
21:39:06 <CycLBot> ?WHAT-COLLECTION = type of collection
21:40:03 <dmiles> noparaphrase #opencyc
21:40:05 <dmiles>  subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 3))
21:40:06 <CycLBot> ((?WHAT-COLLECTION . SetOrCollection))
21:40:07 <CycLBot> ((?WHAT-COLLECTION . SetOrCollectionType))
21:40:08 <CycLBot> ((?WHAT-COLLECTION . CollectionType))
21:40:13 <dmiles> paraphrase #opencyc
21:40:14 <dmiles>  subl: (cyc-query '(#$isa #$Collection ?what-collection) #$BaseKB '(:number 3))
21:40:16 <CycLBot> ?WHAT-COLLECTION = intensional or extensional set
21:40:17 <CycLBot> ?WHAT-COLLECTION = set or collection type
21:40:18 <CycLBot> ?WHAT-COLLECTION = type of collection
23:59:59 --- log: ended opencyc/02.04.22
