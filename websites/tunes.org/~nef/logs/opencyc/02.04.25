00:00:00 --- log: started opencyc/02.04.25
01:19:25 --- join: theos_wrk (~torsten@kbs59.informatik.uni-bremen.de) joined #opencyc
01:20:50 <dmiles-> hi theos
01:22:57 <theos_wrk> dmiles-: hi
01:23:00 <theos_wrk> up so late?
01:23:32 <theos_wrk> btw, soon we will engage in a project around/with opencyc and inted to contribute
01:23:51 <theos_wrk> this will be besides my lab's activites but more on the institution scale
01:23:52 <dmiles-> yeah trying to get classes adjusted by morning'
01:24:00 <theos_wrk> look promising and interesting
01:24:08 <dmiles-> java classes.. and then get a demo 
01:24:13 <theos_wrk> enjoying your account lately?
01:24:22 <dmiles-> havent had much time ;<
01:24:30 <theos_wrk> busy as I am :)
01:24:46 <dmiles-> yeah.. its like having a new album or waterskis
01:25:26 <dmiles-> you set yourself up to earn it.. i am close to using it to secure up my machine
01:25:45 <dmiles-> i mean i set goals with carrots for myslef
01:26:12 <theos_wrk> *g*
01:26:15 <dmiles-> but primary focus is to get a logicmoo demo goi9ng
01:26:36 <dmiles-> jamud is undergoing tons of design changes thaty wont be done for over a week
01:26:48 <dmiles-> so i am going to make logicmoo work with alpha5 version
01:26:53 <dmiles-> which works just fine
01:27:17 <dmiles-> then when the newer versiohn is complete.. it will greatly simplify my code
01:27:46 <dmiles-> the newer version was designed arround parameters of what i wanted
01:28:12 <dmiles-> but its at least a week before being stable
01:28:34 <dmiles-> i have a hard time not doing anything until then ;P
01:29:10 <dmiles-> so by morning will be able to telnet in and make cyc infernce on the game
01:29:32 <dmiles-> i was going to delay using cyc for game creation..
01:29:49 <dmiles-> until this first part is done.. but here we are stuck w/o content
01:30:12 <dmiles-> so going to try to use some cyc queries to create some intial testing content
01:30:22 <dmiles-> like..
01:30:23 <theos_wrk> sounds interesting
01:30:37 <theos_wrk> so in one or two weeks there is something to "test" 
01:30:44 <dmiles-> query: (isa ?W Region)
01:30:45 <CycLBot> java.lang.NullPointerException
01:30:58 <dmiles-> query: (isa ?W GeographicalRegion)
01:30:59 <CycLBot> java.lang.NullPointerException
01:31:17 <dmiles-> oh well but going to create a room for each instance
01:31:47 <dmiles-> and use spaciallyConnects for doors between them
01:32:05 <dmiles-> sio yeah maybe even this weekend should have a sample Mud
01:32:28 <dmiles-> the create from cyc part will test be a single test thing i run once to make a map..
01:32:32 <theos_wrk> then quickly speech enable it and enjoy the first real wireless usable cycdriven game
01:32:34 <dmiles-> i want to export it to users asap
01:33:15 <dmiles-> but for now it will be a button in the webbrowser saying.. ReifgyCycMT to Jamud world
01:34:12 <dmiles-> then certain predicfied queries will be made which will invoke certain game objects to become existing
01:35:29 <dmiles-> ok, it almnost builds
01:40:31 * theos_wrk is back in 2 hours maybe dmiles- is still awake :)
01:40:33 * theos_wrk is away: Humans distracting me!
01:57:11 --- quit: CycLBot (Remote closed the connection)
02:11:52 --- join: CycLBot (root@12-225-207-235.client.attbi.com) joined #opencyc
02:11:52 <CycLBot> I am initializing
02:11:52 <CycLBot> I am ready to chat
02:12:26 <dmiles-> query: (isa ?X Cyclist)
02:12:28 <CycLBot> ?X = Cyc administrator, ?X = Guest, ?X = NL Reviewer, ?X = Cyc process
02:13:12 <dmiles-> oops root
02:13:18 --- quit: CycLBot (Remote closed the connection)
02:14:46 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
02:14:47 <CycLBot> I am initializing
02:14:47 <CycLBot> I am ready to chat
02:16:15 <dmiles-> query: (isa ?X Cyclist)
02:16:17 <CycLBot> ?X = Cyc administrator, ?X = Guest, ?X = NL Reviewer, ?X = Cyc process
02:20:40 --- quit: CycLBot (Remote closed the connection)
02:21:03 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
02:21:03 <CycLBot> I am initializing
02:21:04 <CycLBot> I am ready to chat
02:21:59 --- quit: CycLBot (Remote closed the connection)
02:22:31 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
02:22:31 <CycLBot> I am initializing
02:22:32 <CycLBot> I am ready to chat
02:25:01 --- quit: CycLBot (Remote closed the connection)
02:25:46 <dmiles-> ok instead of making him join/part everytime ui recopmpile.. taking him offline for a couple hourts
03:55:45 --- join: mea_culpa (~mea_culpa@12-225-207-235.client.attbi.com) joined #opencyc
03:55:56 --- join: dmiles (~alife@12-225-207-235.client.attbi.com) joined #opencyc
03:56:01 --- quit: dmiles- (Read error: 104 (Connection reset by peer))
03:56:08 --- quit: mea_away (Read error: 104 (Connection reset by peer))
03:59:58 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
03:59:58 <CycLBot> I am initializing
03:59:58 <CycLBot> I am ready to chat
04:00:13 <dmiles> query: (isa ?X Cyclist)
04:00:14 <CycLBot> ?X = Guest, ?X = NL Reviewer, ?X = Cyc process, ?X = Cyc administrator
04:00:18 <dmiles> bsh: 34
04:00:19 <CycLBot> 34
04:00:38 <dmiles> bsh: System.exit(0)
04:00:38 --- quit: CycLBot (Remote closed the connection)
04:07:47 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
04:07:48 <CycLBot> I am initializing
04:07:48 <CycLBot> I am ready to chat
04:10:09 --- quit: CycLBot (Remote closed the connection)
04:22:10 --- quit: theos_wrk ("Client Exiting")
05:42:59 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
05:42:59 <CycLBot> I am initializing
05:42:59 <CycLBot> I am ready to chat
06:36:25 <QuantumG> ($#isa $#CycLBot ?X)
06:36:59 <dmiles> query: (isa CycLBot ?X)
06:37:00 <CycLBot> NIL
06:37:21 <QuantumG> heh, thought it might know what it was.
06:37:27 <dmiles> assert: (isa CycLBot Cyclist)
06:37:48 <dmiles> hrrm
06:38:03 <dmiles> assert: (isa CycLBot Cyclist)
06:38:12 <dmiles> mt: BaseKb
06:38:15 <dmiles> mt: BaseKB
06:38:19 <dmiles> assert: (isa CycLBot Cyclist)
06:38:24 <dmiles> query: (isa CycLBot ?X)
06:38:46 <dmiles> lagged
06:39:08 <dmiles> bsh: 2
06:40:25 --- quit: QuantumG (Read error: 104 (Connection reset by peer))
06:42:16 --- quit: CycLBot (Read error: 104 (Connection reset by peer))
06:44:47 --- join: QuantumG (qg@cpu1727.adsl.bellglobal.com) joined #opencyc
06:50:40 <QuantumG> what ontology did/do you have the bot set up to?
06:55:39 <dmiles> baseKb
06:55:49 <dmiles> hrrm haveing a hard time starting it
06:55:54 <dmiles> think i almost have it
07:10:12 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
07:10:12 <CycLBot> I am initializing
07:10:12 <CycLBot> I am ready to chat
07:10:38 --- quit: CycLBot (Remote closed the connection)
07:13:53 --- join: CycLBot (cyc@12-225-207-235.client.attbi.com) joined #opencyc
07:13:54 <CycLBot> I am initializing
07:13:54 <CycLBot> I am ready to chat
07:14:07 <dmiles> mt BaseKB
07:14:18 <dmiles> assert: (isa CycLBot Cyclist)
07:14:18 <CycLBot> T
07:14:23 <dmiles> query: (isa CycLBot ?X)
07:14:25 <CycLBot> ?X = partially intangible thing
07:14:26 <CycLBot> ?X = partially intangible individual
07:14:27 <CycLBot> ?X = thing existing stably in time
07:14:28 <CycLBot> ?X = thing
07:14:29 <CycLBot> ?X = object
07:14:30 <CycLBot> ?X = thing that exists in time
07:14:31 <CycLBot> ?X = (CollectionUnionFn (TheSet Agent-Generic (GroupFn Agent-Generic)))
07:14:32 <CycLBot> ?X = generic agent
07:14:33 <CycLBot> ?X = individual
07:14:34 <CycLBot> ?X = cyclist
09:15:02 --- join: msbaltz (~msbaltz@wsip68-15-169-160.no.no.cox.net) joined #opencyc
13:10:55 --- join: Taral (taral@cs6625132-47.austin.rr.com) joined #opencyc
14:29:24 --- quit: Taral ("food")
15:17:38 --- quit: msbaltz ()
16:22:52 --- join: trinlis (~John@ool-18bb3e4f.dyn.optonline.net) joined #opencyc
16:35:15 --- quit: trinlis (Read error: 104 (Connection reset by peer))
20:35:48 --- join: mea_away (~mea_culpa@12-225-207-235.client.attbi.com) joined #opencyc
20:35:48 --- quit: mea_culpa (Read error: 104 (Connection reset by peer))
21:02:25 --- quit: ChanServ (carter.openprojects.net irc.openprojects.net)
21:02:50 --- join: ChanServ (ChanServ@services.) joined #opencyc
21:02:50 --- mode: carter.openprojects.net set +o ChanServ
21:22:27 --- join: SethR (~seth@12-230-243-179.client.attbi.com) joined #opencyc
21:23:21 <dmiles> evening Seth
21:23:36 <SethR> hi
21:24:07 <dmiles> i am getting closer to having logicmoo runnable
21:24:59 <dmiles> its a ballancing act between how it should work and how it's easier to code .. (like most things) 
21:26:06 <dmiles> i think i have the moo flattened out for inference though
21:26:07 <SethR> great ... coding on my api is going very slow ... like moving through molassas ... but i feel like im making great progress ... like im doking a deep search and when i get to the bottom, the tree will just generate
21:26:41 <dmiles> so you dfecend fully.. and flatten
21:27:01 <dmiles> well making everything at some point look like a fact
21:27:31 <dmiles> but preserving the how you got there
21:27:39 <SethR> yeah something like that .... i got a real clear idea of where im going .. cause ive been there before ...just i need to learn the new stuff on the way .. like python and oo programming
21:28:11 <dmiles> i really like python.. i onl;y spent a few weeks learening it.. but its certainly makes design prettier
21:28:23 <SethR> i sure hope ill be ablel to use your inference machine when i get there ... cause i dont want to write it myself
21:28:41 <dmiles> heh :) i am using cy cnow myself ;P
21:28:45 <dmiles> err cyc
21:28:59 <dmiles> well see if there can be a shared work between cyc and it
21:29:16 <dmiles> right now i needed a fully delivered system
21:29:51 <dmiles> and my system, was as you know a certain relation to cyc ;P
21:30:33 <dmiles> so if it was complete and perfect it would just be another cyc itself
21:30:55 <SethR> huh?
21:31:25 <dmiles> oh i meant the prevoius *subcomponent* of logicmoo
21:31:39 <dmiles> that cyc has taken it's place
21:32:36 <dmiles> logicmoo was an inferncer system written in prolog that had an inline Moo
21:32:53 <SethR> so you use the cyc inference engine and their kb but you interface to your definition of the moo rooms and their environments ... something like that?
21:33:05 <dmiles> exactly
21:33:33 <dmiles> so that the moo datamodel is much smaller then what it represents
21:34:06 <dmiles> it uses inference to make exstentials into objects
21:34:48 <SethR> are those objects, objects in the oo sense?
21:34:59 <dmiles> yes
21:35:10 <SethR> .. as well as representing virtual objects to the inhabitants?
21:35:12 <dmiles> in cyc they remain logical object
21:35:37 <dmiles> but they reifiy into the moo as tanglable room objects
21:35:56 <dmiles> so inhabitants will see two arms forall humans that exist
21:36:12 <dmiles> or tables in every dinning room 
21:36:42 <SethR> is there going to be actual visual output that we can see?
21:36:50 <SethR> or just gonna be a text game?
21:36:52 <dmiles> only in the sense of look
21:36:57 <dmiles> yes just text
21:37:16 <dmiles> its not hard for someone that loves 3D graphics to make it visual
21:37:36 <dmiles> what they do is write a special client that talks to the servers APi
21:37:44 <SethR> mine too .. im just concentrating on verbal behaviro
21:38:02 <dmiles> yeah definately enough work there
21:38:32 <SethR> so how do we comm with the objects? are they DECOM or some sort of network objects?
21:38:55 <dmiles> currently you can use the 'bsh' api over telent
21:39:18 <dmiles> there are generic RMI/Soap possiblitities
21:39:37 <dmiles> bsh: jamudWorldAccess
21:39:37 <CycLBot> host localhost, asciiPort 3601, cfaslPort 3614
21:39:49 <SethR> hmmm .. well i supose there is a python lib to do that .. so that it will be transparent to the human user .. huh?
21:40:17 <dmiles> well getting humans access first is priorty and as problky going to better maintianed
21:40:38 <dmiles> so that way programtic agetns might want to use the same api as a human
21:40:58 <dmiles> so python would telnet there
21:41:15 <dmiles> and you'd use make program friently interfaces/methods
21:41:26 <dmiles> on the python object that telnet there
21:41:45 <dmiles> then your program would use the program side of your usage api
21:41:59 <dmiles> and the other side python would be jumping the hoops to make it happen
21:42:34 <dmiles> then when a lower level.. made for proams becomes better you'd change your connection code to talk to the more dirrect RMI
21:42:51 <dmiles> rr.. made for programs
21:42:58 <dmiles> example:
21:43:07 <dmiles> humans have 'look' cokmand
21:43:32 <dmiles> that lists object that are spaciallyConnected to the room they are in
21:44:11 <dmiles> another way if the human know cycl they could query their room
21:44:22 <dmiles> but starting with 'look'
21:44:41 <dmiles> the python would send 'look'
21:44:54 <dmiles> and then the mud would give it a list of objects
21:45:09 <dmiles> so you get have a mehtod called getRoomContents in pythong
21:45:38 <dmiles> that took the varible for the room name
21:45:59 <dmiles> python would actually first 'teleport <romomnane>
21:46:07 <dmiles> then 'look'
21:46:34 <dmiles> then take the returned acsii and send that as the result of your getRoomContents roomanm,e
21:46:55 <dmiles> if you needed a better formated look for python..
21:47:21 <dmiles> we could make a 'pythonlook'
21:48:26 <dmiles> the telnet interface is the easiest to maintain
21:48:29 <SethR> yeah i can see how this will work 
21:48:33 <dmiles> since its currently functional ;P
21:49:11 <SethR> the interface dont really matter .. its the message formats .. and those are mostly just cycL .. huh?
21:49:36 <dmiles> well when the mud is in cyc (as it always should be reflected into)
21:49:46 <dmiles> err mud/moo
21:50:00 <dmiles> then even the existing cyc intefacings are just as usable
21:50:39 <dmiles> but deciding the message formats..
21:50:53 <SethR> hmmm .. so i could query for common knowledge, stead of having it all in my local memory?
21:51:03 <dmiles> cycl is good .. even already fasl/api libraries
21:51:27 <dmiles> yes. 
21:51:52 <dmiles> since the moo is really only there to make the cyc kb something we can walk into
21:52:22 <dmiles> the cyc side of logicmoo is more powerfull and holds the information
21:52:52 <dmiles> the jamud side.. is made to just provide a way that abnormal cyc agetns (like use hamuns) to be in
21:53:05 <SethR> hmmmm .... thinking of how i can use the moo to be my inference engine
21:53:49 <SethR> i just translate into cycl and send a micortheory and then ask the moo questions about it ... hummm got to think re that one
21:54:18 <dmiles> well thats is what its supposed to be able to help do
21:54:54 <dmiles> but also another service of the moo.. is to write an agent and place him in the moo with a task like sretriving webpages and storing contents in local objects
21:54:57 <SethR> have you done that?
21:55:35 <dmiles> i have written one agent to walk arround pretending to be eliza
21:56:07 <dmiles> the one i am working on right now is one that exists there and in irc
21:56:15 <SethR> so smushing symbals together is gonna be a big problem for me ... could i write an agent and place it in the moo, and that agent wojuld talk to my memory and smush my symbals together logically?
21:56:33 <dmiles> that could be that agents task yes
21:56:50 <dmiles> the moo provides a background daemon for your agetn to be living in
21:57:08 <SethR> but my memory lives on my computer
21:57:26 <dmiles> if that is the case then the moo would be a place for remote storage
21:57:51 <dmiles> then on another comp[uter you could have written another to use that stored info and mash symbols
21:58:16 <SethR> so i would transmit a microtheory to the moo and ask it for that microtheory back with similar nodes smushed together?
21:58:23 <dmiles> or the same.. the moo is a wiki 
21:59:05 <dmiles> yes that could be done.. but describe the mushing technique
21:59:15 <dmiles> err smuching ;P
22:00:35 <SethR> just when there are two subjects, but logically they are identical .. so combining them is what i think danbri stated to call 'smushing'
22:00:36 <dmiles> the fact that the moo is attempting to place everything into only one 'Mud' context 
22:01:15 <dmiles> meaning its doing its best to make information live together
22:02:12 <SethR> [preferedEmail seth@robustai.net; a Man]
22:02:17 <dmiles> so if possible it can.. but if it's good at it .. we will havce to see
22:02:31 <SethR>  [preferedEmail seth@robustai.net; owns SethBot]
22:02:59 <dmiles> that could create two indiviguals in the mud
22:03:08 <dmiles> a bot and a man
22:03:18 <SethR> two existential objects, but since preferedEmail is a daml:UnambiguousProperty, they really are the same object and should be smushed
22:03:58 <dmiles> yes preferedEmail seth@robustai.net is existential one right?
22:04:22 <dmiles> ( preferedEmailFn "seth@robustai.net" )
22:04:35 <dmiles> should reify to something
22:04:57 <SethR> (exists ?x (preferedEmail "seth@robustai.net"))
22:05:07 <SethR> sorry been hanging around rdfig too much
22:05:35 <dmiles> (thereExists ?x (equals ? (preferedEmailFn "seth@robustai.net")))
22:05:42 <dmiles> oops
22:05:46 <dmiles> (thereExists ?x (equals ?X (preferedEmailFn "seth@robustai.net")))
22:06:28 <dmiles> or we could say that preferedEmailFn resultIsa Person
22:06:50 <dmiles> (resultIsa preferedEmailFn Indivigual)
22:07:12 <dmiles> or better constrain it
22:07:14 <SethR> the domain of the preferedEmailFn is Person .. errr i think
22:07:47 <dmiles> yeah the (domain preferedEmailFn 2 Person)
22:08:03 <dmiles> (domain preferedEmailFn 1 EmailLoction)
22:08:34 <dmiles> so i guess it is a Relation that maps a email and a person together
22:08:46 <SethR> yep ... 1-1
22:10:24 <SethR> so i get info from two different sources about that and i got to smush it together
22:10:29 <dmiles> so if all the declarations are there, the idea is the moo should leverage cyc to make the person of "seth@robustai.net" exist
22:11:09 <dmiles> then create a generic thing for SethBot
22:11:30 <SethR> errr... well ... dont know about that one ... i just want there to be a single node representing that person in my memory .. not two different existential objects
22:11:47 <dmiles> aha.. i missed that part.. becasue i saw two
22:11:59 <dmiles> one is the person and another is a bot owned by the person
22:12:02 <SethR> yeah .. cause there were two
22:12:26 <SethR> but logically we should be able to conclude that both of those nodes represent the same thing
22:12:40 <dmiles> owns i thought would be two slots
22:12:46 <SethR> so i want my memory to be corrected to have only the one node representing that person
22:13:41 <SethR> well the n3 form
22:13:43 <SethR>  [preferedEmail seth@robustai.net; a Man]
22:14:08 <SethR> the square brackets means that the subject is missing and is assumed to be an existential varialble
22:14:22 <dmiles> ah
22:14:25 <dmiles> go on
22:14:49 <SethR> well so  [preferedEmail seth@robustai.net; owns SethBot]
22:15:07 <SethR> refers to the same person as the first []
22:15:15 <dmiles> oh so sethbot was not important
22:15:24 <SethR> but the parsers must build two different nodes
22:16:01 <SethR> but since preferedEmail is a 1-1 Fn with Person, logically the moo should tell me that i should smush the two nodes into one node
22:16:28 <SethR> iow i want
22:16:37 <dmiles> yes in this case it should assert the two peices of information onto one object
22:17:01 <dmiles> if preferedEmail seth@robustai.net is the object
22:17:14 <dmiles> and two information being a Man and owns SethBot
22:17:47 <SethR> (exists ?x (isa ?x Person) (owns ?x SethBot) (preferedEmail ?x "seth@robustai.net"))
22:18:36 <dmiles> that would be interesting to try out in cyc..
22:18:44 <SethR> thats what id want back .. i still dont know the constant identity of ?x
22:19:21 <dmiles> mt BaseKB
22:19:21 <SethR> how do you apply a new cycConstant to an existential object?
22:19:43 <SethR> so that finally i end up with
22:20:17 <dmiles> assert: (thereExists ?x (and (preferedEmail ?x "seth@robustai.net") (isa ?x Person)))
22:20:20 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
22:20:20 <CycLBot> (#$thereExists ?X (#$and (#$preferedEmail ?X "seth@robustai.net") (#$isa ?X #$Person)))
22:20:21 <CycLBot> was not well formed because:
22:20:22 <CycLBot> Term (#$preferedEmail ?X "seth@robustai.net")
22:20:22 <CycLBot> violates #$defnIff EL-SENTENCE-ASSERTIBLE?
22:20:23 <CycLBot> of collection #$ELSentence-Assertible
22:20:24 <SethR>  (isa Seth Person) (owns Seth SethBot) (preferedEmail Seth "seth@robustai.net")
22:20:25 <CycLBot> applicable to arg 1 of #$and
22:20:27 <CycLBot> in mt #$BaseKB.
22:20:29 <CycLBot> (#$preferedEmail ?X "seth@robustai.net") is not a well-formed formula in #$BaseKB.
22:20:31 <CycLBot> Perhaps #$preferedEmail is insufficiently defined in mt #$BaseKB.
22:20:33 <CycLBot> Term (#$and (#$preferedEmail ?X "seth@robustai.net") (#$isa ?X #$Person))
22:20:35 <CycLBot> violates #$defnIff EL-SENTENCE-ASSERTIBLE?
22:20:37 <CycLBot> of collection #$ELSentence-Assertible
22:20:39 <CycLBot> applicable to arg 2 of #$thereExists
22:20:41 <CycLBot> in mt #$BaseKB.")
22:21:12 <dmiles> assert: (isa #$preferedEmail UnaryFunction)
22:21:13 <CycLBot> T
22:21:19 <SethR> woops .. do i know you, CycLBot ?
22:21:39 <dmiles> assert: (resultIsa #$preferedEmail Person)
22:21:40 <CycLBot> T
22:22:14 <dmiles> hrrm oops two ways to have done that.. for some reason i did a function
22:22:45 <dmiles> CycLBot is a thying that runs and does Cyc queries
22:22:54 <dmiles> and also a test subject fort the moo
22:23:08 <dmiles> bsh: jamudWorldAccess
22:23:08 <CycLBot> host localhost, asciiPort 3601, cfaslPort 3614
22:24:01 <dmiles> but just the beginning
22:24:05 --- join: Method (Method@ip68-12-88-154.ok.ok.cox.net) joined #opencyc
22:24:12 <dmiles> a command control thing
22:24:34 <Method> yAR
22:24:49 <dmiles> so herrm lets see.
22:25:12 <dmiles> assert: (isa (preferedEmail ?x "seth@robustai.net") Person)
22:25:14 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
22:25:14 <CycLBot> (#$isa (#$preferedEmail ?X "seth@robustai.net") #$Person)
22:25:15 <CycLBot> was not well formed because:
22:25:16 <CycLBot> The #$arity of #$preferedEmail is 1 [in #$BaseKB].")
22:25:27 <dmiles> assert: (isa (preferedEmail "seth@robustai.net") Person)
22:25:28 <CycLBot> T
22:25:29 <SethR> wow, CycLbot is kewl ... your bot?
22:25:36 <dmiles> yeah
22:26:09 <Method> arg matie
22:26:26 <dmiles> assert: (isa SethBot Thing)
22:26:27 <CycLBot> T
22:26:43 <dmiles> assert: (owns (preferedEmail "seth@robustai.net") SethBot)
22:26:45 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
22:26:45 <CycLBot> (#$owns (#$preferedEmail "seth@robustai.net") #$SethBot)
22:26:46 <CycLBot> was not well formed because:
22:26:47 <CycLBot> (#$owns (#$preferedEmail "seth@robustai.net") #$SethBot) is not a well-formed formula in #$BaseKB.
22:26:47 <CycLBot> Perhaps #$owns is insufficiently defined in mt #$BaseKB.")
22:27:01 <dmiles> assert: (possess (preferedEmail "seth@robustai.net") SethBot)
22:27:03 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
22:27:03 <CycLBot> (#$possess (#$preferedEmail "seth@robustai.net") #$SethBot)
22:27:04 <CycLBot> was not well formed because:
22:27:05 <CycLBot> (#$possess (#$preferedEmail "seth@robustai.net") #$SethBot) is not a well-formed formula in #$BaseKB.
22:27:05 <CycLBot> Perhaps #$possess is insufficiently defined in mt #$BaseKB.")
22:27:23 <dmiles> we have to find ther ownership predicate ;P
22:27:57 <dmiles> ask: (isa (preferedEmail "seth@robustai.net") ?what)
22:27:59 <CycLBot> ?WHAT = composite tangible and intangible thing
22:28:00 <CycLBot> ?WHAT = agent
22:28:01 <CycLBot> ?WHAT = partially intangible thing
22:28:02 <CycLBot> ?WHAT = partially intangible individual
22:28:03 <CycLBot> ?WHAT = (CollectionUnionFn (TheSet Agent-Generic (GroupFn Agent-Generic)))
22:28:04 <CycLBot> ?WHAT = generic agent
22:28:05 <CycLBot> ?WHAT = intelligent agent
22:28:06 <CycLBot> ?WHAT = social agent
22:28:07 <CycLBot> ?WHAT = legal agent
22:28:08 <CycLBot> ?WHAT = thing existing stably in time
22:28:10 <CycLBot> ?WHAT = thing that exists in time
22:28:12 <CycLBot> ?WHAT = localized spatial thing
22:28:14 <CycLBot> ?WHAT = thing
22:28:16 <CycLBot> ?WHAT = object
22:28:18 <CycLBot> ?WHAT = spatial thing
22:28:20 <CycLBot> ?WHAT = thing with two or more dimensions
22:28:22 <CycLBot> ?WHAT = tangible things
22:28:24 <CycLBot> ?WHAT = (CollectionUnionFn (TheSet BiologicalLivingObject (GroupFn BiologicalLivingObject)))
22:28:26 <CycLBot> ?WHAT = (CollectionUnionFn (TheSet Person (GroupFn Person)))
22:28:28 <CycLBot> ?WHAT = person
22:28:47 <dmiles> ok lookiung in KB for ownership
22:29:13 <dmiles> http://12.225.207.235:8080/logicmoo/index.jsp
22:30:23 <dmiles> assert (isa owns AsymmetricBinaryPredicate)
22:30:24 <CycLBot> T
22:30:41 <dmiles> assert: (owns (preferedEmail "seth@robustai.net") SethBot)
22:30:42 <CycLBot> T
22:31:22 <SethR> ok now name that which owns SethBot to be Seth
22:31:59 <dmiles> assert: (isa Seth Person)
22:32:00 <CycLBot> T
22:32:14 <dmiles> (satifing constraints just in case)
22:32:30 <dmiles> assert: (owns Seth SethBot)
22:32:30 <CycLBot> T
22:32:43 <dmiles> ask: (owns ?Who SethBot)
22:32:44 <CycLBot> ?WHO = seth, ?WHO prefered email seth@robustai.net
22:33:15 <dmiles> ok we need to make sure owns is singleValued
22:33:30 <dmiles> at least 1 to Many
22:33:47 <dmiles> so cyc can deduce thay are the same entity
22:34:04 <SethR> but owns is not an unambiguous property like preferedEmail
22:34:05 <dmiles> browsing the KB for an example
22:34:27 <dmiles> well we just 'defined' owns in the baseKb
22:34:31 <dmiles> i have an idwea
22:34:51 <dmiles> mt AgentGMt
22:35:02 <dmiles> ask: (owns ?Who SethBot)
22:35:03 <CycLBot> ?WHO = seth, ?WHO prefered email seth@robustai.net
22:35:33 <dmiles> havent made a retract yet ;P
22:35:44 <dmiles> assert: (isa SethR Person)
22:35:45 <CycLBot> T
22:35:56 <dmiles> assert: (isa SethRBot Thing)
22:35:56 <CycLBot> T
22:36:15 <dmiles> assert: (owns SethR SethRBot)
22:36:17 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
22:36:17 <CycLBot> (#$owns #$SethR #$SethRBot)
22:36:18 <CycLBot> was not well formed because:
22:36:19 <CycLBot> Term #$SethRBot violates arg-isa #$SomethingExisting
22:36:19 <CycLBot> applicable to argument 2 of relation #$owns
22:36:20 <CycLBot> in mt #$AgentGMt.
22:36:24 <CycLBot> Consider asserting
22:36:26 <CycLBot> (#$owns #$SethR #$SethRBot)
22:36:28 <CycLBot> in mt #$BaseKB.")
22:36:39 <dmiles> assert: (isa SethRBot SomethingExisting)
22:36:40 <CycLBot> T
22:36:42 <dmiles> assert: (owns SethR SethRBot)
22:36:43 <CycLBot> T
22:37:14 <dmiles> assert: (owns  (preferedEmail "seth@robustai.net") SethRBot)
22:37:15 <CycLBot> T
22:37:28 <dmiles> ask: (owns  ?W SethRBot)
22:37:29 <CycLBot> ?W prefered email seth@robustai.net, ?W = seth r
22:38:36 <dmiles> idea..
22:39:02 <dmiles> assert: (equals  (preferedEmail "seth@robustai.net") SethR)
22:39:02 <CycLBot> T
22:39:08 <dmiles> ask: (owns  ?W SethRBot)
22:39:09 <CycLBot> ?W prefered email seth@robustai.net, ?W = seth r
22:39:18 --- join: Method_ (Method@ip68-12-88-154.ok.ok.cox.net) joined #opencyc
22:39:34 <SethR> ask: (?w preferedEmail)
22:39:35 <CycLBot> Using microtheory#$SethRChatMt for assertions until SethR types "mt <something>"
22:39:36 <CycLBot> NIL
22:40:09 --- quit: Method (Read error: 104 (Connection reset by peer))
22:40:10 <dmiles> type: mt AgentGMt
22:40:29 <SethR> mt AgentGMt
22:40:37 <dmiles> ok its set up
22:40:49 <SethR> (mt AgentGMt)
22:41:13 <dmiles> query: (equals (preferedEmail ?Email) ?who)
22:41:14 <CycLBot> the empty list
22:41:17 <SethR>  ask: (?w preferedEmail)
22:41:17 <CycLBot> NIL
22:41:34 <dmiles> query: (equals ?who (preferedEmail ?Email))
22:41:35 <CycLBot> the empty list
22:41:50 <SethR> ask: (?w preferedEmail ?x)
22:41:51 <CycLBot> ?W = result isa, ?X = person, ?W = arity, ?X = 1, ?W = isa, ?X = unary function
22:42:59 <SethR> how do i just get all the assertions about preferedEmail ?
22:43:19 <SethR> no using preferedEmail
22:43:36 <dmiles> http://12.225.207.235:8036/cgi-bin/cyccgi/cg?cb-content-frame&8318
22:44:03 <dmiles> in the web interface
22:44:32 <dmiles> is one place
22:44:40 <SethR> cool!
22:45:25 <dmiles> yeah the bot accesses the same cyc server
22:46:41 <dmiles> also the Mud interface (soon)
22:47:19 <dmiles> reifing them into one object will require a point in location and time
22:47:20 <SethR> this is really more developed than i though :)
22:47:39 <dmiles> heh i am just ussing Cyccorps API
22:48:10 <dmiles> since they are ussualy making stuff that few people know how to use w/o extensive coding
22:48:12 <SethR> where did:
22:48:27 <SethR> (equals SethR (preferedEmail "seth@robustai.net")) in AgentGMt
22:48:32 <SethR> come from?
22:48:38 <dmiles> i tried asserting it here
22:48:49 <dmiles> we can retract it as well
22:48:59 <SethR> oh i see, hyou just asserted it
22:49:16 <dmiles> refresh..
22:49:16 <SethR> you cheated ... its got to infer that 
22:49:20 <dmiles> it just killed it
22:50:26 <dmiles> lets esee its going to dissapear in a sec
22:50:52 <SethR> wont go away :(
22:51:00 <dmiles> ok itsd gone ;)
22:51:06 <SethR> ok
22:51:21 <SethR> now can you get the agent to infer it?
22:51:21 <dmiles> refresh or click preferdEmail
22:51:40 <dmiles> somnehow owns as a predicate is not strong enough
22:52:04 <dmiles> or preferedEmial needs to be told it reifies
22:52:11 <SethR> owns dont want to be ... preferedEmail is a 1-1 with a unique person .. that's what's gotta do the trick
22:52:28 <dmiles> yes.. lets look at function types
22:53:13 <dmiles> ask: (isa ?W FunctionCatagory)
22:53:14 <CycLBot> NIL
22:53:20 <dmiles> ask: (isa ?W FunctionCategory)
22:53:22 <CycLBot> ?W = function-denoting function
22:53:23 <CycLBot> ?W = microtheory designating function denotational
22:53:24 <CycLBot> ?W = unreifiable function
22:53:25 <CycLBot> ?W = total denotational function
22:53:26 <CycLBot> ?W = unit of rate
22:53:27 <CycLBot> ?W = date-denoting function
22:53:28 <CycLBot> ?W = individual-denoting function
22:53:29 <CycLBot> ?W = collection-denoting function
22:53:30 <CycLBot> ?W = function
22:53:31 <CycLBot> ?W = set-denoting function
22:53:33 <CycLBot> ?W = attribute-denoting function
22:53:34 <dmiles> .
22:53:35 <CycLBot> ?W = fixed arity skolem function
22:53:35 <dmiles> ..
22:53:37 <CycLBot> ?W = partial denotational function
22:53:39 <CycLBot> ?W = symmetry member function
22:54:00 <dmiles> noparaphrase: #opencyc
22:54:02 <dmiles> ask: (isa ?W FunctionCategory)
22:54:04 <CycLBot> ((?W . FunctionDenotingFunction))
22:54:04 <CycLBot> ((?W . MicrotheoryDesignatingFunction-Denotational))
22:54:05 <CycLBot> ((?W . UnreifiableFunction))
22:54:05 <CycLBot> ((?W . TotalDenotationalFunction))
22:54:06 <CycLBot> ((?W . UnitOfRate))
22:54:06 <CycLBot> ((?W . DateDenotingFunction))
22:54:07 <CycLBot> ((?W . IndividualDenotingFunction))
22:54:09 <CycLBot> ((?W . CollectionDenotingFunction))
22:54:11 <CycLBot> ((?W . Function-Denotational))
22:54:13 <CycLBot> ((?W . SetDenotingFunction))
22:54:15 <CycLBot> ((?W . AttributeDenotingFunction))
22:54:17 <CycLBot> ((?W . FixedAritySkolemFunction))
22:54:19 <CycLBot> ((?W . PartialDenotationalFunction))
22:54:21 <CycLBot> ((?W . SymmetryMemberFunction))
22:54:23 <CycLBot> ((?W . PredicateDenotingFunction))
22:54:25 <CycLBot> ((?W . FunctionFromQuantitiesToQuantities))
22:54:27 <CycLBot> ((?W . ReifiableFunction))
22:54:29 <CycLBot> ((?W . VariableArityFunction))
22:54:31 <CycLBot> ((?W . ShapeFunction))
22:54:33 <CycLBot> ((?W . UnaryIntersectionFunction))
22:54:35 <CycLBot> ((?W . FixedArityFunction))
22:54:50 <dmiles> assert (isa preferedEmail FixedAritySkolemFunction)
22:54:51 <CycLBot> T
22:55:06 <dmiles> assert (isa preferedEmail ReifiableFunction)
22:55:07 <CycLBot> T
22:55:23 <dmiles> assert (isa preferedEmail IndividualDenotingFunction)
22:55:23 <CycLBot> T
22:55:42 <dmiles> ask: (isa preferedEmail ?W)
22:55:43 <CycLBot> ((?W . UnaryRelation))
22:55:43 <CycLBot> ((?W . Function-MathematicalObject))
22:55:44 <CycLBot> ((?W . FixedArityFunction))
22:55:44 <CycLBot> ((?W . UnaryFunction))
22:55:45 <CycLBot> ((?W . Relation-MathematicalObject))
22:55:45 <CycLBot> ((?W . FixedArityRelation))
22:55:46 <CycLBot> ((?W . SkolemFunction))
22:55:48 <CycLBot> ((?W . FixedAritySkolemFunction))
22:55:50 <CycLBot> ((?W . ReifiableFunction))
22:55:52 <CycLBot> ((?W . Individual))
22:55:54 <CycLBot> ((?W . PartiallyIntangibleIndividual))
22:55:56 <CycLBot> ((?W . IntangibleIndividual))
22:55:58 <CycLBot> ((?W . Thing))
22:56:00 <CycLBot> ((?W . PartiallyIntangible))
22:56:02 <CycLBot> ((?W . Intangible))
22:56:04 <CycLBot> ((?W . MathematicalOrComputationalThing))
22:56:06 <CycLBot> ((?W . MathematicalThing))
22:56:08 <CycLBot> ((?W . MathematicalObject))
22:56:10 <CycLBot> ((?W . Relation))
22:56:12 <CycLBot> ((?W . FunctionalRelation))
22:56:14 <CycLBot> ((?W . Function-Denotational))
22:56:16 <CycLBot> ((?W . IndividualDenotingFunction))
22:57:00 <dmiles> query: (equals (preferedEmail ?Email) ?who)
22:57:01 <CycLBot> NIL
22:57:51 <dmiles> query: (equals ?who (preferedEmail "seth@robustai.net"))
22:57:52 <CycLBot> (((?WHO preferedEmail "seth@robustai.net")))
22:58:18 <SethR> strange response
22:59:00 <dmiles> query:(and (equals (preferedEmail ?Email) ?who) (owns ?who SethRBot) )
22:59:01 <CycLBot> NIL
22:59:22 <dmiles> query:  (owns ?who SethRBot) 
22:59:22 <CycLBot> (((?WHO preferedEmail "seth@robustai.net")) ((?WHO . SethR)))
23:00:03 <dmiles> query:  (and   (owns ?who SethRBot) (equals (preferedEmail ?Email) ?who) )
23:00:03 <CycLBot> NIL
23:00:12 <dmiles> we want it to say yes to this!
23:00:29 <SethR> yeah
23:00:41 <dmiles> query:  (and   (owns ?who SethRBot) (equals (preferedEmail "seth@robustai.net") ?who) )
23:00:42 <CycLBot> (((?WHO preferedEmail "seth@robustai.net")))
23:01:29 <dmiles> query: (thereExistsExactly 1 ?who (owns ?who SethRBot) )
23:01:31 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
23:01:31 <CycLBot> (#$thereExistsExactly 1 ?WHO (#$owns ?WHO #$SethRBot))
23:01:32 <CycLBot> was not well formed because:
23:01:33 <CycLBot> (#$thereExistsExactly 1 ?WHO (#$owns ?WHO #$SethRBot)) is not a well-formed formula.
23:01:33 <CycLBot> Perhaps #$thereExistsExactly is insufficiently defined.")
23:01:49 <dmiles> query: (thereExists ?who (owns ?who SethRBot) )
23:01:50 <CycLBot> (NIL)
23:01:57 <dmiles> that actually meant yes
23:02:33 <dmiles> lets ask it for a count
23:03:45 <dmiles> query: (thereExistExactly 1 ?who (owns ?who SethRBot) )
23:03:45 <CycLBot> (NIL)
23:03:52 <dmiles> query: (thereExistExactly ?n ?who (owns ?who SethRBot) )
23:03:52 <CycLBot> (NIL)
23:04:10 <dmiles> assert: (thereExistExactly 1 ?who (owns ?who SethRBot) )
23:04:11 <CycLBot> T
23:04:14 <dmiles> query: (thereExistExactly ?n ?who (owns ?who SethRBot) )
23:04:14 <CycLBot> (NIL)
23:04:19 <dmiles> query:  (and   (owns ?who SethRBot) (equals (preferedEmail "seth@robustai.net") ?who) )
23:04:20 <CycLBot> (((?WHO preferedEmail "seth@robustai.net")))
23:04:30 <dmiles> query:  (and   (owns ?who SethRBot)  )
23:04:30 <CycLBot> (((?WHO preferedEmail "seth@robustai.net")) ((?WHO . SethR)))
23:04:38 <dmiles> query:   (owns ?who SethRBot)  
23:04:39 <CycLBot> (((?WHO preferedEmail "seth@robustai.net")) ((?WHO . SethR)))
23:05:08 <dmiles> hrrm
23:05:23 <dmiles> this is the area of Cyc i really need to understand more
23:05:38 <dmiles> i know this is a typical problem it is supposed to solve
23:05:46 <SethR> interesting though 
23:06:11 <SethR> i think this is one of DanC 's favorite problems .. mine also
23:06:40 <dmiles> i know there is an established methodolgy
23:06:56 <dmiles> i mean specific for Cyc
23:07:14 <dmiles> by name denotation .. its not a problem
23:07:26 <dmiles> since Seth was not introducxed
23:07:32 <SethR> thing is that wer're gonna be getting a lot of nodes in our memories ... but we want all those that deonte the same thing to be just one node ... otherwise we get wrapped up in our underware
23:08:09 <dmiles> yes if Cyc can be used to take care of this.. (which i am sure it does) then logicmoo will as well
23:08:29 <dmiles> since logicmoo is just a specialized front end and database for cyc
23:08:59 <dmiles> a database that makes the real world programmed objects something cyc can play with
23:09:10 <SethR> and i want to leverage logicmoo to do this form my memory ... ill pay .000000001 cents for ever node it smushes
23:09:21 <SethR> just kidding
23:09:23 <dmiles> :P
23:09:35 <dmiles> well i am looking for a job (barely)
23:09:57 <dmiles> i have to make more then my unemployment checks though :P
23:09:57 <SethR> well im barely not looking for a job 
23:10:12 <SethR> and now im gettin punch drunk and should go to bed
23:10:34 <dmiles> i get max benfits for our state
23:10:56 <dmiles> so it hard in washington to make that much.. wierd
23:11:47 <SethR> well get the moo working and you shold be able to leverage that into income ... huh
23:12:05 <dmiles> that the idea.. or at least prove owrth
23:12:11 <dmiles> err worth
23:12:40 <SethR> bet theres a lot of cycCorp folk want to see that too
23:13:22 <dmiles> well see. in the 101 course it is an evetual goal
23:13:45 <SethR> ... want to know my strategy .. since nobody is listening?
23:13:50 <dmiles> yes
23:15:01 <SethR> get my memory working ... give it away like the browsers ... then charge to certify bots like verisign ... so a bot that is not certified as being owned by a real certified person cant do much on the net .. so people pay to get papers for their bots
23:15:22 <dmiles> yes.. people buy support for it especially
23:15:42 <SethR> well yeah, theres that angel too ... but that is labor intensive
23:16:30 <SethR> one can set up a machine\procedure that will sell the certifications .. only labor is cheep clerical to verify peoples identity
23:17:23 <dmiles> so what would the bots do? are they expert librarians?
23:17:40 --- join: stevereed_home (~reed@adsl-66-141-46-249.dsl.austtx.swbell.net) joined #opencyc
23:17:41 <SethR> so when one of my bots enters a room, if its an annomous bot, well then it wont have many priviledges and maybe even will be offed by some admen bot
23:18:10 <SethR> yeah well there information agents that work for people
23:18:26 <dmiles> so you would say.. find me restraunts in the area near where i live?
23:18:38 <SethR> sure
23:18:56 <SethR> things you couldnt just find with a google search
23:19:16 <dmiles> well just about everything is googlable but colating the information
23:19:32 <dmiles> and making it through the noise
23:19:40 <dmiles> or tangent surfing ;P
23:20:37 <dmiles> the other night i wanted Tai food delivered in downtown Seattle at 8:30 pm
23:20:51 <SethR> theres not limit to what these bots can do for us, once they have an environmt in which they can navigate ... that just hasn't existed yet
23:20:57 <dmiles> it took me until 9 pm to find one
23:21:12 <SethR> when did yuou start your search
23:21:25 <dmiles> with an agenda to spend money.. it should have been the easiest thing to find
23:21:55 <dmiles> well i found lots of restraunts but none listed if they delivered
23:21:58 <dmiles> i had to call around
23:22:23 <dmiles> and i am sure the information could have been there
23:22:31 <SethR> yeah .. set up toll booths on your rooms .. with advertisements on the outside to lure bots in to satisfy the needs of their human owners
23:22:35 <dmiles> err it was arround but not on the pages i looked at
23:22:40 <dmiles> i started at 8:30
23:23:22 <dmiles> i think thoiugh that an atononmous agetn could have taken the same ammmount of time
23:23:36 <dmiles> which even if it did, at least i could have done other things
23:23:53 <dmiles> or it could have guided my tour
23:24:13 <SethR> and then we can agree that you doen even let a annon bot into a chargeagele room ... that way we can get a fee to certify the bots
23:25:21 <dmiles> i think the grants you'd get for upscalling it would definately be good
23:26:03 <dmiles> one thing you see at PI meetings is not enough real world demos
23:26:41 <dmiles> if you had a find me a restraunt dialog bot.. 
23:27:15 <dmiles> definately expert dialogs haver been demo'd
23:27:32 <dmiles> its getting the templates to be expandbler by people 
23:29:00 <dmiles>  my interest in the Moo is based on how a bot behind the scene makes a world it discorses about
23:29:20 <dmiles> which is kinda the log way arroundf
23:29:34 <dmiles> rr long way
23:29:57 <dmiles> hi Steve
23:30:52 <stevereed_home> hi, got back to my computer finally
23:32:57 <SethR> hi stve ... do  we have uri's for cyc constants now?
23:33:06 <stevereed_home> two flavors
23:33:20 <stevereed_home> the daml tools flavor has the constant name embedded
23:33:35 <stevereed_home> because all the tools dont use label
23:33:55 <stevereed_home> the CycML flavor has urn:uuid:......
23:34:15 <stevereed_home> which keeps the constant renameable as a label
23:35:09 <stevereed_home> we have the uuids already assigned for each term
23:35:53 <SethR> and the other?
23:36:04 <stevereed_home> something like:
23:37:24 <stevereed_home> http://www.opencyc.org/2002/04/26/Thing
23:37:48 <stevereed_home> where the date is a snapshot of the term names.
23:37:59 <SethR> which doesnt dereference at the moment
23:38:09 <stevereed_home> right
23:38:47 <stevereed_home> I need a cgi script
23:39:03 <stevereed_home> to get the damlUri out of cyc
23:39:09 <stevereed_home> and give back a comment page
23:39:23 <stevereed_home> too many terms for static pages
23:39:46 <stevereed_home> and one big page, like the one given at www.daml.org is way to big
23:39:49 <SethR> hmmm ... interesting ... so cycCorp is acutally gonna publish 2 different uri for the same constant 
23:39:54 <stevereed_home> yes
23:40:11 <stevereed_home> i want to use just one style
23:40:17 <SethR> one dereferencable and the other not
23:40:25 <stevereed_home> right
23:40:29 <dmiles> so then you can say give me ebnough info about ny partucular constant
23:40:55 <SethR> well you could call the one a URL and the other the URI
23:41:09 <stevereed_home> URN?
23:41:24 <stevereed_home> urn:uuid:<guid>
23:42:03 <stevereed_home> yes URI for the dereferenceable one
23:42:15 <stevereed_home> and URN for the uuid one
23:42:16 <dmiles> sounds like the internet need a Guid server!
23:42:32 <stevereed_home> do you know how guids are made?
23:43:06 <SethR> (uri constantA "urn:uuid:1243345")
23:43:33 <dmiles> explain, 
23:43:39 <SethR> (seeUrl constantA "http:////www.opencyc.org/2002/04/26/Thing")
23:43:50 <stevereed_home> right,
23:43:51 <SethR> or actually
23:44:51 <SethR> (uri Thing "urn:uuid:1") (seeUrl Thing ""http:////www.opencyc.org/2002/04/26/Thing")
23:45:13 <stevereed_home> yes that would work
23:45:36 <SethR> in that case the urn is the uri and the http thing is there for derereferencing and they not confused
23:45:44 <stevereed_home> you understand the term rename issue.
23:46:06 <stevereed_home> the date in the seeUrl ties the name of the term down.
23:47:04 <dmiles> that is very neat
23:47:24 <dmiles> someone or thing.. would have to create date to date mappings
23:47:24 <SethR> so later i assert
23:47:52 <SethR>  (uri Thingey "urn:uuid:1") (seeUrl Thingey ""http:////www.opencyc.org/2010/04/30/Thingey")
23:48:01 <stevereed_home> bookkeeping assertions in cyc keep track of date asserted
23:48:32 <stevereed_home> but better would be a special meta assertion for that purpose.
23:48:58 <SethR> like?
23:49:24 <stevereed_home> seeUrlDatePublished
23:49:37 <stevereed_home> arg1 is the assertion
23:49:40 <stevereed_home> arg2 the date
23:50:13 <stevereed_home> another issue for uris is distributed authorship
23:50:26 <stevereed_home> with the urn scheme publishing is easy
23:50:38 <stevereed_home> no need for a dereferencing server
23:50:44 <stevereed_home> or central registry
23:51:14 <stevereed_home> guids are always unique so no collisions.
23:51:16 <SethR> well to me it looks like the urn is in fact the uri that is persistant and will never change once it is coined
23:51:27 <stevereed_home> right
23:51:36 <stevereed_home> the ids are never resued.
23:51:40 <SethR> the constant term and the url are gonna be changeing as the language changes
23:51:42 <stevereed_home> err reused.
23:52:00 <stevereed_home> Cycorp renames a few terms each week.
23:52:10 <stevereed_home> philosophers....
23:52:38 <dmiles> :)
23:52:50 <SethR> thing is what is the assertion that ties the urn to the constant name ?
23:53:12 <stevereed_home> i'll look it up... 
23:53:20 <stevereed_home> the constant name is held
23:53:32 <stevereed_home> in a structrure which
23:53:42 <stevereed_home> is keyed on the guid (urn)
23:54:01 <stevereed_home> Cyc reflects that relationship back up into the KB
23:54:15 <stevereed_home> with a predicate so that constant names can be reasoned with.
23:54:34 <stevereed_home> but you cannot actually assert this predicate
23:54:49 <stevereed_home> you use the api or user interface for creates, kills and renames.
23:55:06 <SethR> but the predicate does exist in the kb ... doesnt it ... what is it's name?
23:55:23 <stevereed_home> #$constantName
23:56:02 <stevereed_home> thats not part of the commonsense kb content
23:56:04 <SethR> (#$consgtantName Thing "1")
23:56:08 <SethR> something like that?
23:56:30 <stevereed_home> I'll ask CycLBot..
23:56:34 <SethR>  (#$consgtantName "Thing" "1")
23:56:50 <stevereed_home> ask: (constantName #$Thing ?name)
23:56:51 <CycLBot> Using microtheory#$stevereed_homeChatMt for assertions until stevereed_home types "mt <something>"
23:56:52 <CycLBot> (((?NAME . "Thing")))
23:57:12 <stevereed_home> the name of #$Thing is "Thing"
23:57:24 <SethR> hehe
23:57:51 <SethR> so get the guid out
23:58:03 <stevereed_home> let me look...
23:58:40 <stevereed_home> we dont have it yet, its on my to-do list
23:59:02 <stevereed_home> but you can get it from the command line..
23:59:10 <stevereed_home> i'll ask CycLBot
23:59:25 <stevereed_home> subl: (constant-guid #$Thing)
23:59:26 <CycLBot> bd5880f4-9c29-11b1-9dad-c379636f7270
23:59:59 --- log: ended opencyc/02.04.25
