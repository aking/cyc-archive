00:00:00 --- log: started opencyc/02.10.18
05:04:48 --- nick: mea_culpa_ZzZz -> mea_culpa
09:34:28 --- join: devEiant (~deveiant@dsl081-108-067.den1.dsl.speakeasy.net) joined #opencyc
11:16:40 --- nick: dmiles_afk -> dmiles
11:53:08 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
11:58:13 --- quit: CycLBot (Excess Flood)
11:58:13 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
12:26:05 --- quit: CycLBot (Excess Flood)
12:26:05 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
12:36:55 --- quit: CycLBot (Excess Flood)
12:36:56 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
12:40:15 --- quit: CycLBot (Excess Flood)
12:40:16 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
12:40:39 --- quit: CycLBot (Excess Flood)
12:40:39 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
13:25:42 --- join: Cobwa (~cobra@dsl-64-129-232-145.telocity.com) joined #opencyc
13:26:29 --- quit: clog (^C)
13:26:29 --- log: stopped opencyc/02.10.18
13:26:56 --- log: started opencyc/02.10.18
13:26:56 --- join: clog (nef@bespin.org) joined #opencyc
13:26:56 --- topic: 'Welcome to #opencyc, The IRC channel for the OpenCyc project. ***Release 0.6 is now available from http://sourceforge.net/projects/opencyc/'
13:26:56 --- topic: set by people on [Tue Jul 16 08:22:30 2002]
13:26:56 --- names: list (clog Cobwa CycLBot devEiant Cobra kinoc deltab ZivZ dmiles stevereed fleeky mea_culpa @ChanServ)
14:03:12 --- join: sandos (~user@clown.campus.mdh.se) joined #opencyc
14:03:41 <sandos> gah, still no new release?
14:05:04 --- join: Yepster_home (yepster@vetteaap.xs4all.nl) joined #opencyc
14:05:28 <Yepster_home> hello
14:17:54 --- quit: Cobwa ("[x]chat")
15:03:18 --- quit: Yepster_home ()
15:55:12 --- quit: devEiant ("ENOSLEEP")
16:41:55 --- join: devEiant (~deveiant@w102.z064220058.den-co.dsl.cnc.net) joined #opencyc
16:54:42 --- join: Cobwa (~cobra@dsl-64-129-232-145.telocity.com) joined #opencyc
19:21:56 --- join: Loplin (~icechat@ppp-99-46.milwaukee.tec.wi.us) joined #opencyc
19:21:59 <Loplin> hello
19:23:26 <dmiles> hi
19:23:43 <Loplin> hey
19:23:47 <Loplin> how is that mud going?
19:24:04 <dmiles> pretty good
19:24:13 <dmiles> got three dirrections goin gon
19:24:21 <Loplin> how far along are you?
19:24:33 <dmiles> i think though i have definatly not making code thats not always in there
19:25:11 <dmiles> well i gave an expertment wothj warcraft and starcraft clone
19:25:27 <dmiles> there is a SF project called freecraft
19:25:44 <dmiles> no what i did was elect to use a protcol called Atlas
19:25:50 <dmiles> have you heard of KQML?
19:26:07 <Loplin> no
19:26:10 <dmiles> Knowledge Query Meta Language
19:26:33 <dmiles> it was desinged almost ten years ago for an agetn to agent protocol
19:27:19 <dmiles> well i basicly said to myslf there has to be one facualtiy
19:27:26 <Loplin> ?
19:27:42 <dmiles> one place that all process can find their data and each other
19:27:47 <Loplin> ah
19:28:14 <Loplin> are you using code from an opensource mud?
19:28:16 <dmiles> do you know C?
19:28:29 <dmiles> well i have tried two muds in particualar
19:28:32 <Loplin> like diku or one of its spin offs?
19:28:38 <dmiles> Jamud a Java mud (opensource)
19:28:47 <Loplin> I uhm, dont really "know" c
19:28:54 <Loplin> i have a few books on it
19:29:04 <Loplin> and when i see something i want to do in c, i try it
19:29:04 <dmiles> then i started working on an all cyc query version of a mud
19:29:14 <Loplin> then i see something else, and lose interest in c
19:29:15 <dmiles> ah .. i am that way as well
19:29:21 <Loplin> so i forget what i learned
19:29:39 <dmiles> well i tend to only write C to do an forign link.. then i try to avoid it again long as possiblle
19:29:47 <Loplin> i have gone in and out of interest like 20 times in the past year and a half
19:30:13 <dmiles> :)
19:30:30 <dmiles> well worldforge has a Mud system as welll
19:30:42 <Loplin> so what special stuff can this cyc enabled mud do?
19:30:45 <dmiles> they used very cyclike concepts as well
19:30:56 <Loplin> hm
19:31:08 <dmiles> well currently its bound by the complexity of clietns.. since i started to go 3D
19:31:28 <dmiles> there is a client called Sillence that connects as well
19:31:49 <Loplin> ahh, your making a vr mud?
19:31:58 <dmiles> well as far as what it did (like the last time it worked) is it created a mud map in game based on cyc assertions
19:32:15 <dmiles> it was aslo able to create a few new things as it went
19:32:25 <dmiles> well yes i am getting more into the VR parts
19:32:33 <Loplin> hmm
19:32:39 <Loplin> i dont know much about making 3d stuff
19:32:55 <dmiles> actually this week though i have been working on the Starcraft/Warcraft interface
19:33:11 <dmiles> you have seen one of thiseo games?
19:33:23 <Loplin> i've heard of them, but never seen them
19:34:03 <dmiles> if you say it.. it is very impressive to look at
19:34:24 <dmiles> its actually like age of empires.. a real time stradegy game
19:34:24 <Loplin> do you know how hard it would be to make a program that would let you chat with the cyc kb?
19:34:26 <Loplin> really?
19:34:45 <dmiles> ok well to make this kind of program is not easy
19:34:49 <dmiles> but very doable
19:34:56 <Loplin> i mean
19:34:59 <Loplin> in natural language
19:35:05 <dmiles> besically there has to be a english to CycL converter
19:35:09 <Loplin> I dont want to have to put weird symbols in
19:35:14 <dmiles> for example:
19:35:40 <dmiles> prolog: english2Kif("i know language.")
19:35:42 <CycLBot> (assert (known_phrase (verbSemTrans (#$knows ?Speaker ?language1) (and true (isa_in ?language1 #$Language)))))
19:36:00 <Loplin> ?
19:36:07 <Loplin> I have no idea what any of that meant
19:36:13 <dmiles> if i said "I know language" cyc would really hear that transatlion
19:36:45 <dmiles> so cyc understands it in the context of it's normal expert system 
19:37:07 <dmiles> assert that there exists a language that the speaker knows
19:37:09 <CycLBot> org.opencyc.api.CycApiException: (S#21632 :MESSAGE "A SYMBOL at 0x40010150 is not a f_6469.")
19:37:25 <deltab> heh
19:37:26 <dmiles> so this first stage needs to really be sound
19:37:56 <dmiles> then we need to define the elmetns of a practical conversion and give Cyc the ability to participate
19:38:06 <dmiles> it's almost like a role playing game
19:38:10 <dmiles> deltab :)
19:38:26 <Loplin> would i be able to tell cyc something, and have it remember something?
19:38:28 <Loplin> eg.
19:38:39 <dmiles> we need to enumerate more of what is said and win and define rules
19:38:39 <Loplin> If i were to say hello to it, and it didnt respond
19:38:47 <Loplin> I would say it is polite to say hello back
19:38:52 <deltab> so CycLBot knows "assert"? what other commands does it recognize?
19:39:08 <dmiles> it would need to understand that hello was an assertion that you the speaker is interested in talking to it
19:39:29 <dmiles> then it needs to start the planning it will take to do the things you want
19:40:02 <Loplin> so i would have to say, "Hello Cyc"?
19:40:09 <dmiles> it has a few commands.. that wap java cyc api.. like assert,query,ask,subl,mt
19:40:13 <Loplin> so that it knows i'm talking to cyc?
19:40:38 <dmiles> possible yes part of convcersational rules could maean you use it's name so it knows your talking to it
19:40:40 <deltab> Loplin: hello
19:41:11 <deltab> hello Loplin
19:41:15 <dmiles> however the knowledge engineering (these rules) still need to be written
19:41:26 <deltab> hmm
19:41:50 <dmiles> deltab.. hrrm maybe he is pinging out?
19:42:01 <Loplin> ?
19:42:05 <deltab> hehe
19:42:06 <dmiles> well i created a dynamic class loader for each irc command...
19:42:15 <dmiles> however it's installed in the wroing dirrectory
19:42:22 <dmiles> so only the hardcoded commands work
19:42:36 <dmiles> mt InferencePSC
19:42:49 <dmiles> ask: (isa ?X City0
19:42:50 <deltab> "Hello" isn't a very useful thing to say, since it doesn't communicate much
19:42:52 <dmiles> ask: (isa ?X City)
19:43:02 <dmiles> query: (isa ?X City)
19:43:22 <dmiles> oh i see it's working hard on it
19:43:37 <dmiles> ywah "Hello" needsa context
19:43:50 <dmiles> if the person just entered chat it may mean nothing
19:43:51 <Loplin> why?
19:44:08 <Loplin> it means hello
19:44:14 <dmiles> if a person has been in chat a while it may signal they dont understand somerthing or need a response
19:44:42 <dmiles> i mean right it means hello.. but it's almost like a game action as well as a speaking
19:45:12 <deltab> it's a framing mechanism, to establish or re-establish a conversation
19:45:24 <dmiles> once conversation is partually turned into something close to RPG.. the knowledge engineering starts to become more productive
19:45:34 <deltab> but it doesn't offer much of a clue of how to respond
19:45:45 <Loplin> it should respond with hello
19:45:50 <Loplin> :P
19:46:15 <deltab> what if both sides do that?
19:46:23 <Loplin> eh?
19:47:01 <deltab> what if I respond to "hello" with "hello" too?
19:47:15 <Loplin> then that would be good
19:47:29 <Loplin> Loplin: Hello Cyc
19:47:34 <Loplin> Cyc: Hello
19:48:27 <Loplin> Isnt that what should happen?
19:48:40 <deltab> yes, but then what?
19:48:47 <Loplin> Then nothing
19:48:55 <deltab> do you respond with "hello" too?
19:49:06 <Loplin> then it waits for someone to say something i guess
19:49:31 <Loplin> I mean, i walk into a mud or a chatroom or something all the time and say hello, the say hello back
19:49:33 <Loplin> and thats it
19:49:40 <Loplin> we go on doing what we were doing
19:50:30 <dmiles> the right things to do is always a mater of opinion .. so it's important that these rules can change by author
19:51:21 <dmiles> then set up a situation where cyc itself can start to author
19:51:30 <Loplin> thats what i want
19:51:32 <dmiles> for example the game guess the animal ...
19:51:38 <deltab> my point is that it's probably more useful (and interesting) to look at questions, statements and commands
19:51:57 <Loplin> i wanted cyc to be somewhat social
19:51:59 <dmiles> i agree with deltab
19:52:30 <deltab> sure, but it needs more than social skills
19:52:37 <Loplin> yeah
19:52:55 <Loplin> but the social skills isnt my main aim
19:53:09 <dmiles> the right why to think of cyc (so you have reasonable expectations) is a rule based programming language
19:53:32 <dmiles> i hybrid of Lisp and PrologKB
19:53:39 <dmiles> er a
19:53:50 <dmiles> that is an extremely powerfull compination
19:54:08 <dmiles> self modifying and intrpospecting
19:54:23 <Loplin> well, i'm thinking, it would be more user freindly, and fun to use if i could talk to it like a human
19:54:34 <dmiles> so to teach it to converse .. one you have the lisp code started.. is a mater of editing it's KB
19:54:46 <Loplin> heres an example conversation of what i'm imaging
19:54:50 * deltab nods 
19:54:58 <Loplin> it would start off with basic conversation skills
19:55:01 <Loplin> ...
19:55:10 <Loplin> Loplin enter the irc room.
19:55:18 <Loplin> Loplin: Hello Cyc
19:55:34 <Loplin> (cyc doesnt do anything cause he dont know what to do with hello)
19:55:50 * dmiles nods to go on
19:56:03 <Loplin> Loplin: Cyc, it is polite to say hello back to a person when they say hello
19:56:15 <Loplin> Loplin: Cyc, you are polite
19:57:04 <Loplin> (cyc remembers this, and makes a note that it is polite to say hello back, then makes a note that he is polite)
19:57:12 <Loplin> Loplin: hello Cyc
19:57:17 <Loplin> Cyc: hello Loplin
19:57:46 <dmiles> Lopin yes you totally have it down .. this concept of automated teaching
19:58:16 <Loplin> this was my original idea. Can cyc do this?
19:58:29 <Loplin> well
19:58:39 <dmiles> this is part of why i am interested in the logicmoo concept.. i want to be able to decribe things and have them become rules at some point
19:58:42 <Loplin> if it had a natural language inturpretter?
19:58:46 <dmiles> yes
19:58:59 <dmiles> thats the problem righ tnow is just the English2Kif
19:59:07 <dmiles> err english2CycL
19:59:10 <dmiles> :)
19:59:28 <Loplin> now how does english2CycL work?
19:59:36 <dmiles> we need the semantics of what is said to be converted into CycL
20:00:48 <Loplin> also
20:00:52 <Loplin> I forgot to say this
20:01:24 <Loplin> (cyc also makes a note that Loplin is the one who told cyc it was polite to respond hello with hello, then makes a note that loplin said that cyc is polite)
20:02:03 <Loplin> this way cyc can remember people, and resume conversations later
20:02:20 <dmiles> yes there is even that structure in BookkeepingMt
20:02:32 <dmiles> as far as memorizing the author of each contnet
20:02:54 <dmiles> o that when it deals with you .. it might know that you have certain expectations
20:03:15 <dmiles> or someone might tell cyc you are a very trustable petrson and to use your rules if they confict with anpothers
20:03:49 <Loplin> now i would eventually want cyc to figure out for itself, who to trust and who not to :P
20:04:05 <dmiles> there is a concept of these things called Microtheories.. they are blocks of assertions that all make sense together
20:04:11 <Loplin> if i were to put a bot of it in an irc channel, i wouldnt want just anyone telling it crap
20:04:39 <Loplin> eg...
20:04:43 <dmiles> well thats the beuty of a microtheory.. you can let people dump into an untrusted microtheory
20:05:07 <Loplin> Moron: Cyc, your a dumbass
20:05:28 <dmiles> and only use that microtheories contents as they make sense with others as a last case senerio
20:05:39 <Loplin> (cyc figures out that dumbass is bad, and cyc is being insulted, then figures out that you dont trust people who insult you
20:06:15 <dmiles> oh thats a big problem i am interested in.. the authorial english is not always known with meaning
20:06:31 <Loplin> ?
20:06:47 <dmiles> it you told cyc it was a dumbass it may look for what it is.. let me give you an example
20:07:33 <Loplin> its not going to thinks its an a dumb animal is it?
20:07:51 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cyc ?What) #$InferencePSC)");
20:07:52 <CycLBot> (((?WHAT . TheTerm)) ((?WHAT . Entity)) ((?WHAT . IndexicalConcept)) ((?WHAT . CycLReifiableDenotationalTerm)) ((?WHAT . CycLReifiedDenotationalTerm)) ((?WHAT . HLReifiedDenotationalTerm)) ((?WHAT . ELExpression)) ((?WHAT . CycLClosedDenotationalTerm)) ((?WHAT . CycLClosedAtomicTerm)) ((?WHAT . CycLRepresentedTerm)) ((?WHAT . CycLRepresentedAtomicTerm)) ((?WHAT . CycLDenotationalTerm)) ((?WHAT . CycLAtomicTerm)) ((?WHAT . HLExpression)) ((?WHAT . SubLExpre
20:08:08 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cyc ?What) #$InferencePSC)").interator()
20:08:09 <CycLBot> Sourced file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$Cyc ?What) #$InferencePSC)").interator(); > : reflection error: bsh.ReflectError: No args method interator() not found in class'org.opencyc.cycobject.CycList' : at Line: 1 : in file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$Cyc ?What) #$InferencePSC)").interator(); > : .interator ( )
20:08:14 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cyc ?What) #$InferencePSC)").iterator()
20:08:14 <CycLBot> ((?WHAT . TheTerm))
20:08:15 <CycLBot> ((?WHAT . Entity))
20:08:16 <CycLBot> ((?WHAT . IndexicalConcept))
20:08:17 <CycLBot> ((?WHAT . CycLReifiableDenotationalTerm))
20:08:18 <CycLBot> ((?WHAT . CycLReifiedDenotationalTerm))
20:08:19 <CycLBot> ((?WHAT . HLReifiedDenotationalTerm))
20:08:20 <CycLBot> ((?WHAT . ELExpression))
20:08:22 <CycLBot> ((?WHAT . CycLClosedDenotationalTerm))
20:08:22 <CycLBot> ((?WHAT . CycLClosedAtomicTerm))
20:08:24 <CycLBot> ((?WHAT . CycLRepresentedTerm))
20:08:25 <CycLBot> ((?WHAT . CycLRepresentedAtomicTerm))
20:08:27 <CycLBot> ((?WHAT . CycLDenotationalTerm))
20:08:29 <CycLBot> ((?WHAT . CycLAtomicTerm))
20:08:31 <CycLBot> ((?WHAT . HLExpression))
20:08:33 <CycLBot> ((?WHAT . SubLExpression))
20:08:35 <CycLBot> ((?WHAT . CycLTerm))
20:08:37 <CycLBot> ((?WHAT . CycLExpression))
20:08:39 <CycLBot> ((?WHAT . CycLClosedExpression))
20:08:41 <CycLBot> ((?WHAT . CycLIndexedTerm))
20:08:43 <CycLBot> ((?WHAT . HLIndexedTerm))
20:08:45 <CycLBot> ((?WHAT . CycLConstant))
20:08:47 <CycLBot> ((?WHAT . ProposedPublicConstant))
20:08:49 <CycLBot> ((?WHAT . (CollectionUnionFn (TheSet Agent-Generic (GroupFn Agent-Generic)))))
20:08:51 <CycLBot> ((?WHAT . Agent-Generic))
20:08:53 <CycLBot> ((?WHAT . IndividualAgent))
20:08:55 <CycLBot> ((?WHAT . Cyclist))
20:08:57 <CycLBot> ((?WHAT . Artifact-Generic))
20:08:59 <CycLBot> ((?WHAT . SomethingExisting))
20:08:59 <Loplin> eww
20:09:01 <CycLBot> ((?WHAT . SpatialThing))
20:09:02 <dmiles> it may decide "dumbass" is the intersection of all those collections
20:09:03 <CycLBot> ((?WHAT . SpatialThing-Localized))
20:09:04 <Loplin> i dont know what any of this is
20:09:05 <CycLBot> ((?WHAT . InformationStore))
20:09:07 <CycLBot> ((?WHAT . TemporalThing))
20:09:07 <dmiles> . .
20:09:09 <CycLBot> ((?WHAT . PartiallyIntangible))
20:09:11 <CycLBot> ((?WHAT . Thing))
20:09:13 <CycLBot> ((?WHAT . Individual))
20:09:15 <CycLBot> ((?WHAT . PartiallyIntangibleIndividual))
20:09:17 <CycLBot> ((?WHAT . (CollectionUnionFn (TheSet InformationBearingThing DevisedPracticeOrWork))))
20:09:19 <CycLBot> ((?WHAT . InformationBearingThing))
20:09:21 <CycLBot> ((?WHAT . CycTheCollection))
20:09:26 <dmiles> this is what Cyc *is* according to itself
20:09:50 <deltab> CycLBot: it's polite to not put so much onto the channel at once unless specifically asked to
20:09:54 <dmiles> so if you tell it it is a dumbass.. maybe that what the definateion of a dumbass was
20:10:28 <dmiles> i thought it would just be Agent based stuff (i forget aboutthe top 10 things in there that aere definational)
20:10:59 <deltab> in other words, if you tell it that it's a dumbass, it'll believe you
20:11:09 <Loplin> thats not good
20:11:17 <dmiles> so ok now if thats the defination Cyc thought... lit asserts the belief that thats what it is
20:11:49 <Loplin> so before i let other people talk to it
20:11:52 <dmiles> but also another thing.. if later you define dumbass differnt.. it will have made many wrong assertions by then
20:12:11 <dmiles> retraction in Cyc is very difficult issue
20:12:18 <Loplin> i would HAVE to tell it what some of the slang means
20:12:51 <dmiles> yes the more you can tell it before you expose it to the world the better
20:13:00 <Loplin> would it have self fixing mechanisms?
20:13:04 <Loplin> eg.
20:13:13 <dmiles> someone once said the only things we can hear and understand atre thoughts we could have had ourselves
20:13:14 <Loplin> it thinks dumbass means fish
20:13:34 <dmiles> err we could have thought ourselves
20:13:34 <Loplin> and i later tell it that its an insult
20:13:54 <Loplin> would it go through everything that it learned on its own and change it accordingly?
20:14:05 <dmiles> it is possible to teach cyc how to deal with changing definations
20:14:24 <dmiles> yes there is a proccess that Cy ccan already do to help this
20:14:29 <Loplin> well then, thats something that would be on the before you let it go list
20:14:45 <dmiles> in it's truth maintance system, it can go thru enntire Mt and test each rule
20:15:07 <dmiles> and each fact against the rest if it
20:15:13 <Loplin> how long would it take to do this stuff?
20:15:27 <dmiles> that can be done by removing a fact/rule .. then querying for the negation of it
20:15:43 <Loplin> i mean
20:15:53 <Loplin> if it thought dumbass=fish
20:16:04 <dmiles> then needed to chage?
20:16:16 <dmiles> it depends on how much data had come in since
20:16:37 <Loplin> and then it went and made assumptions based on thinking that dumbass meant fish, there would be a lot of things dependant on that idea
20:17:30 <dmiles> oh it does actualyl track that
20:17:39 <Loplin> oh good
20:17:44 <dmiles> everything it learns it records how it could have gotten there
20:18:07 <dmiles> yeah its saves the proof of each deduction
20:18:20 <Loplin> how many words does it know?
20:18:24 <dmiles> that way if a supporting rule disapears the  deductions go
20:18:44 <dmiles> the entire wordnet + some other syntaxex
20:18:47 <Loplin> would the deductions have to go? or could they just change?
20:19:05 <dmiles> well once they go.. they may be able to be remade again 
20:19:10 <Loplin> or would it delete the deductions, then make new ones
20:19:14 <dmiles> since forward chaining will be restarted
20:19:38 <deltab> and it can then deal with fixing the consequences: "apologies for asking what your fins are - I thought you were some other kind of dumbass"
20:19:42 <Loplin> it couldnt emmediatly make the deductions after it deletes thme
20:19:47 <Loplin> ?
20:20:03 <Loplin> lol
20:20:12 <dmiles> :)
20:20:16 <Loplin> I thought you were some other kind of dumbass
20:20:50 <Loplin> would it also be able to monitor other peoples conversations?
20:21:01 <Loplin> eg. it was put in a linuxhelp channel
20:21:13 <Loplin> and watched people ask questions and get answers
20:21:23 <dmiles> so the case is retract old meaning, deletes the deductions from it, assert the thing, forward chining begins happening
20:21:24 <Loplin> would it save those questions and answers?
20:21:51 <dmiles> as a upriogrammer we only have to retract/assert.. the rest is automatic
20:22:04 <Loplin> okay
20:22:09 <dmiles> that would be interesting and i think very possible
20:22:32 <dmiles> whta programming languages do you know?
20:22:38 <Loplin> I think it would be nice to have the cycbot in linuxhelp, and monitor everything, and learn from it, and make deductions from it
20:22:47 <deltab> and it could read news articles, etc.
20:22:49 * Loplin blushes.
20:22:56 <dmiles> (your questions are inteligent enough i think you know alot :P)
20:23:20 <Loplin> well, I dont really "know" any languages
20:23:29 <Loplin> like i said, i jump from interest to interest
20:23:35 <Loplin> i'm 16 right now
20:23:46 <Loplin> what i know is html
20:24:08 <Loplin> and i used to know the basics of assembly
20:24:15 <dmiles> yeah .. i think the mining form web and chat is doiable
20:24:16 <Loplin> and i used to know the basics of c
20:24:20 <dmiles> the code for it is even doable
20:24:33 <dmiles> but it's funny this stuff is not being worked on very hard
20:24:41 <Loplin> yeah
20:25:03 <Loplin> if it could sit in an irc channel and learn, i think it would learn a lot faster then putting stuff in by hand
20:25:13 <Loplin> it would be the answer bot
20:25:46 <dmiles> well a few years ago none of this was possible back when people dreamed it up
20:26:01 <Loplin> I'm going to get back into c, and learn all this cyc stuff
20:26:02 <dmiles> many of those people dont know thats its possible now
20:26:08 <Loplin> and hopefully start developing
20:26:13 <deltab> why C?
20:26:15 <Loplin> thats sad
20:26:22 <Loplin> c is known by more people
20:26:35 <Loplin> and i already have books on it
20:26:36 <deltab> I'd recommend python
20:26:43 <Loplin> or python yeah
20:26:49 <Loplin> i was actually pretty interested in that
20:26:59 <Loplin> since its multi platform
20:27:11 <Loplin> i should probobly work in that instead
20:27:18 <Loplin> but which is faster?
20:27:31 <dmiles> i think to be rounded you have to know python, C++,C,Java and Haskell,Mercury and Prolog + one other Scheme, KLisp or smalltalk
20:27:32 <Loplin> speed i think would be critical in such a big database
20:27:38 <deltab> faster to program in? python
20:27:59 <Loplin> no, i mean end up with a faster program
20:28:10 <deltab> C, of course
20:28:45 <Loplin> thats what i thought
20:28:47 <deltab> but it's best to get something working first before trying too hard to make it fast
20:29:01 <Loplin> is the database controlled by lisp?
20:29:14 <deltab> with python it's quite easy to connect to C code, where needed
20:29:27 <Loplin> so that the c program would just be a in-between program, that communicated witht the database?
20:29:45 <Loplin> err
20:29:49 <Loplin> hmm
20:30:43 <Loplin> if i were to make a c/python program, would it communicate with the kb directly, or would it talk to a program that communicated with the kb?
20:31:18 * deltab looks to dmiles 
20:31:18 <dmiles> it could use FASL comminications socket
20:31:36 <dmiles> you can have mulitple queries running
20:32:15 * Loplin nods.
20:32:18 <dmiles> so to write a C program ussing Cyc.. you would bang together a FASL reader
20:32:32 <deltab> FASL?
20:32:44 <dmiles> or if you wanted to reuse some Lisp reader .. you can communicate over the SuBL api port
20:32:48 <Loplin> heh, i agree with deltab
20:33:27 <deltab>    fasl or fasl file: a file containing compiled Lisp code, written, for
20:33:28 <deltab>    example, by compile-file. `fasl' stands for FASt Loading.
20:33:32 <deltab> that?
20:33:45 * dmiles is actually looking up the accrynym
20:33:54 <dmiles> its what Cyc taklsk over port 3600
20:34:24 <dmiles> yeah it has that meaning you gave as well
20:34:42 <Loplin> well, there are a few questions to ask before i would decide which way to communicate with it, first: which is easier to work with, second: which works faster
20:34:44 <dmiles> i am wondering if they actually are the smae textually
20:34:58 <dmiles> SubL is easier to work with and debug
20:34:58 <CycLBot> java.lang.ClassCastException: org.opencyc.cycobject.CycSymbol
20:35:12 <dmiles> SubL (+ 1 1)
20:35:13 <CycLBot> java.lang.ClassCastException: org.opencyc.cycobject.CycSymbol
20:35:44 <dmiles> the subl interface are lisp tems
20:36:00 <dmiles> err lisp terms over a plain persistant telnet socket
20:36:22 <dmiles> the funny thing is the only saving over Fasl is the size of numbers
20:36:29 <dmiles> err in fasl
20:36:46 <dmiles> decimally in AScii vs 8 bytes
20:37:01 <Loplin> so on a scale from one to 10, how hard would it be to make a program that communicates with the kb, using natural language, 10 being as hard as a flight sim, 1 being your basic hello world prog
20:37:06 <deltab> I've have to find and read more about this
20:37:08 <dmiles> because the constant strings still have to be sent
20:37:11 <Loplin> err 1 to 10
20:37:31 <deltab> ^I'll
20:38:29 <dmiles> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/opencyc/org/opencyc/api/CfaslOutputStream.java?rev=HEAD&content-type=text/vnd.viewcvs-markup
20:38:38 <dmiles> h its called CFasl :P
20:38:39 <deltab> thanks
20:38:53 <deltab> ah, that's why I couldn't find anything about it
20:39:01 <dmiles> basicly is serialization over Btyecode
20:39:38 <Loplin> or how big would the program have to be?
20:40:07 <dmiles> i think the compunication in C would only be a couple scores of lines maybe
20:40:20 <Loplin> a couple scores?
20:40:20 <dmiles> its not much differnt then the java equivalent at the URL
20:40:39 <Loplin> how much is that?
20:41:23 <dmiles> CfaslOutputStream.java/CfaslInputStream.java
20:42:17 <dmiles> lloks like about 900 ,lines
20:42:29 <dmiles> but hjava is spaced very much
20:42:31 <Loplin> how much would it be in python?
20:42:44 <Loplin> more or less?
20:42:48 <dmiles> about the same
20:42:56 <deltab> about the same
20:42:56 * Loplin sighs.
20:43:05 <dmiles> but atleast in python you could use your code easier then if you made a clib
20:43:33 <Loplin> it looks like i wont be the one making this program :P
20:43:43 <dmiles> python objects and things make alot more sense
20:44:13 <Loplin> you said they were already working on it with english2CycL though right?
20:44:13 <dmiles> if i had to do it for C or maybe python.. and i was not ambitious.. i'd get a lisp reader and use Subl
20:44:40 <dmiles> thats actually what i did for the prolog ineterface
20:44:57 <dmiles> yeah i am working on 3 things right now
20:45:06 <deltab> Loplin: have a look at the code - it may sound a lot, but it looks pretty simple code
20:45:19 <Loplin> wehre is that code?
20:45:49 <Loplin> nm
20:45:50 <deltab> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/opencyc/org/opencyc/api/CfaslOutputStream.java?rev=HEAD&content-type=text/vnd.viewcvs-markup
20:45:52 <Loplin> i have it
20:45:55 <Loplin> heh
20:46:32 <dmiles> I am switching back and forth from english2Kif, Atlas Server, and freecraft to Altas interface
20:46:50 <Loplin> heh
20:46:57 <Loplin> I do that a lot
20:47:00 <dmiles> i have a feeling i am going to continue the work in prolog then interface to Cyc
20:47:24 <dmiles> i write a Atlas library inSubL and it was too hard to do the rest
20:47:34 <Loplin> I switch from making a website for school, to setting up an intranet, to mud projects, to learning about linux stuff
20:47:36 <dmiles> so sticking to what i know
20:47:52 <dmiles> yes :) so many interesting things to do
20:48:03 <Loplin> thats what i like about computers
20:48:28 <Loplin> oh, did you ever say how many english words cyc knows?
20:48:31 <dmiles> i as well.. and especially AI.. it's an insane challenge constantly
20:48:49 <dmiles> ii give you a quick count.. one sec
20:50:35 * dmiles is counting that it loads wordnet as well
20:50:48 <dmiles> but to really 'know'' .. this is a lttle differnt
20:50:57 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$cup ?What) #$InferencePSC)").iterator()
20:50:58 <CycLBot> Sourced file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$cup ?What) #$InferencePSC)").iterator(); > : reflection error: bsh.ReflectError: No args method iterator() not found in class'org.opencyc.cycobject.CycSymbol' : at Line: 1 : in file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$cup ?What) #$InferencePSC)").iterator(); > : .iterator ( )
20:51:10 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").iterator()
20:51:11 <CycLBot> Sourced file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").iterator(); > : reflection error: bsh.ReflectError: No args method iterator() not found in class'org.opencyc.cycobject.CycSymbol' : at Line: 1 : in file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").iterator(); > : .iterator ( )
20:51:16 <Loplin> hm
20:51:29 <Loplin> how do i say cup in cyc language?
20:51:31 <deltab> it's spelled "interator"
20:51:40 <deltab> dmiles: did you mean iterator?
20:51:46 <dmiles> oh yeah iterator
20:52:04 * dmiles looks back up
20:52:23 <dmiles> ohj it ruturned NIL sysmbol
20:52:30 <dmiles>  bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)")
20:52:31 <CycLBot> NIL
20:52:39 <dmiles>  bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass()
20:52:40 <CycLBot> class org.opencyc.cycobject.CycSymbol
20:52:42 <Loplin> ?
20:52:53 <dmiles> only CycList has .iterator()
20:53:09 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass().getMethods()
20:53:09 <CycLBot> [Ljava.lang.reflect.Method;@296d1d
20:53:29 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass().getMethods()(0)
20:53:30 <CycLBot> In file: <Inline eval of: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass().getMethods()(0); > Encountered "(" at line 1, column 94.
20:53:32 <Loplin> why isnt it telling me the definition of cup or something?
20:53:36 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass().getMethods()[0]
20:53:37 <CycLBot> public int org.opencyc.cycobject.CycSymbol.compareTo(java.lang.Object)
20:53:39 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass().getMethods()[1]
20:53:40 <CycLBot> public boolean org.opencyc.cycobject.CycSymbol.equals(java.lang.Object)
20:53:42 <dmiles> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup ?What) #$InferencePSC)").getClass().getMethods()[2]
20:53:42 <CycLBot> public java.lang.String org.opencyc.cycobject.CycSymbol.toString()
20:54:07 <dmiles> it might not know Cup
20:54:20 <dmiles> if it did it would be #$Cup-TheWord
20:54:41 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup-TheWord ?What) #$InferencePSC)").getClass().getMethods()[2]
20:54:42 <CycLBot> public java.lang.String org.opencyc.cycobject.CycSymbol.toString()
20:54:58 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Dog-TheWord ?What) #$InferencePSC)").getClass().getMethods()[2]
20:54:59 <CycLBot> public static org.opencyc.cycobject.CycList org.opencyc.cycobject.CycList.list(java.lang.Object)
20:55:07 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Dog ?What) #$InferencePSC)").getClass().getMethods()[2]
20:55:08 <CycLBot> public static org.opencyc.cycobject.CycList org.opencyc.cycobject.CycList.list(java.lang.Object)
20:55:16 <Loplin> hmmf
20:56:01 <dmiles> bsh: cyc.converseObject("(cyc-query '(?P #$Cup-TheWord ?What) #$InferencePSC)")
20:56:02 <CycLBot> NIL
20:56:09 <dmiles> bsh: cyc.converseObject("(cyc-query '(?P #$Cup-TheWord ?X ?What) #$InferencePSC)")
20:56:10 <CycLBot> NIL
20:56:25 <dmiles> bsh: cyc.converseObject("(cyc-query '(?P ?X #$Cup-TheWord ?What) #$InferencePSC)")
20:56:26 <CycLBot> NIL
20:56:33 <deltab> I suspect "cup" is too restricted a concept
20:56:36 <dmiles> bsh: cyc.converseObject("(cyc-query '(isa #$Cup-TheWord ?What) #$InferencePSC)")
20:56:37 <CycLBot> Sourced file: <Inline eval of: cyc.converseObject("(cyc-query '(isa #$Cup-TheWord ?What) #$InferencePSC)"); > : Method Invocation cyc.converseObject : at Line: 1 : in file: <Inline eval of: cyc.converseObject("(cyc-query '(isa #$Cup-TheWord ?What) #$InferencePSC)"); > : cyc .converseObject ( "(cyc-query '(isa #$Cup-TheWord ?What) #$InferencePSC)" )
20:56:38 <CycLBot> Target exception: org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
20:56:39 <CycLBot> (ISA #$Cup-TheWord ?WHAT)
20:56:40 <CycLBot> was not well formed because:
20:56:42 <CycLBot> (ISA #$Cup-TheWord ?WHAT) is not a well-formed formula.
20:56:43 <CycLBot> Perhaps ISA is insufficiently defined.")
20:56:50 <dmiles> oops;P
20:56:59 <dmiles> oopyeah pretty domain specific
20:57:27 <Loplin> bsh: cyc.converseObject("(cyc-query '(isa #$Dog-TheWord ?What) #$InferencePSC)")
20:57:28 <CycLBot> Sourced file: <Inline eval of: cyc.converseObject("(cyc-query '(isa #$Dog-TheWord ?What) #$InferencePSC)"); > : Method Invocation cyc.converseObject : at Line: 1 : in file: <Inline eval of: cyc.converseObject("(cyc-query '(isa #$Dog-TheWord ?What) #$InferencePSC)"); > : cyc .converseObject ( "(cyc-query '(isa #$Dog-TheWord ?What) #$InferencePSC)" )
20:57:29 <CycLBot> Target exception: org.opencyc.api.CycApiException: (S#21632 :MESSAGE "Formula
20:57:30 <CycLBot> (ISA #$Dog-TheWord ?WHAT)
20:57:31 <CycLBot> was not well formed because:
20:57:33 <CycLBot> (ISA #$Dog-TheWord ?WHAT) is not a well-formed formula.
20:57:34 <CycLBot> Perhaps ISA is insufficiently defined.")
20:57:49 <dmiles> oops;P needs #$isa
20:58:04 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Dog-TheWord ?What) #$InferencePSC)")
20:58:04 <CycLBot> (((?WHAT . LinguisticObject)) ((?WHAT . Intangible)) ((?WHAT . IntangibleIndividual)) ((?WHAT . AbstractInformationalThing)) ((?WHAT . PartiallyIntangible)) ((?WHAT . Individual)) ((?WHAT . PartiallyIntangibleIndividual)) ((?WHAT . InformationStore)) ((?WHAT . AbstractInformationStructure)) ((?WHAT . LexicalItem)) ((?WHAT . WordConstituent)) ((?WHAT . BaseWordForm)) ((?WHAT . LexicalWord)) ((?WHAT . EnglishWord)) ((?WHAT . CycLReifiableDenotationalTerm)) (
20:58:24 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Cup-TheWord ?What) #$InferencePSC)")
20:58:24 <CycLBot> NIL
20:58:38 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Fish-TheWord ?What) #$InferencePSC)")
20:58:38 <CycLBot> (((?WHAT . LinguisticObject)) ((?WHAT . Intangible)) ((?WHAT . IntangibleIndividual)) ((?WHAT . AbstractInformationalThing)) ((?WHAT . PartiallyIntangible)) ((?WHAT . Individual)) ((?WHAT . PartiallyIntangibleIndividual)) ((?WHAT . InformationStore)) ((?WHAT . AbstractInformationStructure)) ((?WHAT . LexicalItem)) ((?WHAT . WordConstituent)) ((?WHAT . BaseWordForm)) ((?WHAT . LexicalWord)) ((?WHAT . EnglishWord)) ((?WHAT . CycLReifiableDenotationalTerm)) (
20:58:51 <dmiles> bsh: cyc.converseObject("(cyc-query '(?P #$Dog-TheWord ?What) #$InferencePSC)")
20:58:53 <CycLBot> (((?P . comment) (?WHAT . "NOTE: THIS TERM AND ASSERTIONS THAT USE IT ARE NOT STRICTLY PART OF
20:58:53 <CycLBot> CYC'S COMMON-SENSE KNOWLEDGE. RATHER, THEY ARE PART OF CYC'S NL SYSTEM,
20:58:54 <CycLBot> WHICH IS USED TO RELATE NATURAL LANGUAGE TO CYC'S COMMON-SENSE KNOWLEDGE.
20:58:55 <CycLBot> SEE #$SharedNoteOnOpenCycNLConstants FOR MORE INFORMATION.")) ((?P . isa) (?WHAT . ProposedPublicConstant-NL)) ((?P . isa) (?WHAT . CycLDenotationalTerm)) ((?P . posForms) (?WHAT . Verb)) ((?P . infinitive) (?WHAT . "dog")) ((?P . isa) (?WHAT . EnglishWord)) ((?P . posForms) (?WHAT . SimpleNoun)) ((?P . singular) (?WHAT . "dog")))
20:59:32 <dmiles> i was hooping that it was tied to a Collection
20:59:47 <dmiles> becasue they atre just "words" to Cyc unless they have a Collection
21:00:00 <Loplin> hm
21:00:11 <Loplin> and how do they get a collection..what is a collections?
21:00:16 <Loplin> collection*
21:00:17 <deltab> you did ask about the *word* "dog"
21:00:31 <dmiles> yes.. and not the animal
21:00:43 <dmiles> bsh: cyc.converseObject("(cyc-query '(?P #$Dog ?What) #$InferencePSC)")
21:00:44 <CycLBot> (((?P . abbreviationString-PN) (?WHAT . "C. familiaris")) ((?P . scientificName) (?WHAT . "Canis familiaris")) ((?P . superTaxons) (?WHAT . CanineAnimal)) ((?P . isa) (?WHAT . PublicConstant)) ((?P . isa) (?WHAT . OrganismClassificationType)) ((?P . isa) (?WHAT . BiologicalSpecies)) ((?P . comment) (?WHAT . "The collection of all dogs of all breeds.  Elements of #$Dog may be members of #$DomesticPet or of #$WildAnimal; e.g., #$Dog includes the dingo dogs o
21:00:56 <dmiles> bsh: cyc.converseObject("(cyc-query '(?P #$Dog ?T  ?What) #$InferencePSC)")
21:00:57 <CycLBot> (((?P . synonymousExternalConcept) (?T . WordNet-1997Version) (?WHAT . "N01595188")) ((?P . preferredGenUnit) (?T . SimpleNoun) (?WHAT . Dog-TheWord)))
21:00:57 <deltab> aha, that's more like it
21:01:04 <dmiles> :)
21:02:54 <Loplin> hm
21:03:06 <Loplin> bsh: cyc.converseObject("(cyc-query '(#$isa #$Fish ?What) #$InferencePSC)")
21:03:07 <CycLBot> (((?WHAT . ProductType)) ((?WHAT . PublicConstant)) ((?WHAT . PublicConstant-CommentOK)) ((?WHAT . CycLReifiableDenotationalTerm)) ((?WHAT . CycLReifiedDenotationalTerm)) ((?WHAT . HLReifiedDenotationalTerm)) ((?WHAT . ELExpression)) ((?WHAT . CycLClosedDenotationalTerm)) ((?WHAT . CycLClosedAtomicTerm)) ((?WHAT . CycLRepresentedTerm)) ((?WHAT . CycLRepresentedAtomicTerm)) ((?WHAT . CycLDenotationalTerm)) ((?WHAT . CycLAtomicTerm)) ((?WHAT . HLExpression))
21:03:27 <Loplin> bsh: cyc.converseObject("(cyc-query '(?P #$Fish ?T  ?What) #$InferencePSC)")
21:03:28 <CycLBot> (((?P . synonymousExternalConcept) (?T . WordNet-1997Version) (?WHAT . "N02005782")))
21:03:47 <Loplin> bsh: cyc.converseObject("(cyc-query '(?P #$Desk ?T  ?What) #$InferencePSC)")
21:03:48 <CycLBot> NIL
21:03:58 <Loplin> bsh: cyc.converseObject("(cyc-query '(?P #$Greeting ?T  ?What) #$InferencePSC)")
21:03:59 <CycLBot> NIL
21:04:08 <deltab> bsh: cyc.converseObject("(cyc-query '(?P #$Fish ?What) #$InferencePSC)")
21:04:08 <Loplin> bsh: cyc.converseObject("(cyc-query '(?P #$Boss ?T  ?What) #$InferencePSC)")
21:04:08 <CycLBot> (((?P . isa) (?WHAT . PublicConstant-DefinitionalGAFsOK)) ((?P . isa) (?WHAT . PublicConstant-CommentOK)) ((?P . isa) (?WHAT . PublicConstant)) ((?P . isa) (?WHAT . ProductType)) ((?P . isa) (?WHAT . BiologicalClass)) ((?P . isa) (?WHAT . OrganismClassificationType)) ((?P . superTaxons) (?WHAT . Vertebrate)) ((?P . comment) (?WHAT . "An instance of #$BiologicalClass, and a specialization of #$Vertebrate.  Each instance of #$Fish is a cold-blooded animal (s
21:04:10 <CycLBot> NIL
21:04:16 <dmiles> bsh: "words in Cyc: "+483892-287381
21:04:17 <CycLBot> Sourced file: <Inline eval of: "words in Cyc: "+483892-287381; > : Operator: '"-"' inappropriate for objects : at Line: 1 : in file: <Inline eval of: "words in Cyc: "+483892-287381; > : ;
21:04:29 <dmiles> bsh: 483892-287381
21:04:30 <CycLBot> 196511
21:04:35 <dmiles> 196 thousand
21:04:41 <Loplin> hm
21:06:51 <Loplin> i would say, after it learns natural language, it should get tutored for a couple of days on proper english and how to use semi-colons and such
21:07:08 <Loplin> then it should be let loose on a dicionary and an encyclopedia
21:07:23 <dmiles> bsh: 167728-163757 
21:07:24 <CycLBot> 3971
21:07:25 <dmiles> this is how many are really defines
21:07:48 * Loplin nods
21:08:26 <Loplin> how smart is cyc? 6 year old?
21:08:28 <deltab> Loplin: do you know much about Cyc?
21:08:42 <Loplin> well, uhm, kinda
21:09:18 <Loplin> I read that la article a while back, and have been checking in pretty often, i read all the docs once, but now i forgot everything i read
21:09:47 <Loplin> i dont really know how to give it commands though
21:10:21 <deltab> there is a natural-language interface to it, but I think you need to pay to get to use it
21:10:36 <Loplin> :(
21:11:09 <dmiles> deltab: i had thought that myself.. actually there is no perchasable version of Cyc
21:11:22 <Loplin> there isnt?
21:11:26 <Loplin> I thought there was
21:11:27 <dmiles> the "other" version is government projects still
21:11:52 <dmiles> they have no incentive though to hold back NL
21:11:54 <Loplin> I thought the open version was a limited version
21:12:03 <deltab> http://cyc.com/products2.html
21:12:07 <dmiles> the thing aobut NL.. its a very win/lose public apeal
21:12:45 <deltab> okay then, you need to make a better interface to its NL abilities :-)
21:12:49 <dmiles> if they dont get it very right people will moan hard ;P
21:13:15 <dmiles> everyone has the critique ability of NL
21:13:53 <dmiles> hrrm well i was working on a project a month or two ago.. a for-profit comany wanting to use Cyc.. we were willing to pay
21:14:08 <dmiles> so i called cyccorp to find out what e could get
21:14:26 <dmiles> (the company is fortune 500)
21:14:45 <dmiles> so definately we could afford it
21:14:57 <dmiles> but Johnd said.. ah yeah.. we are doing our best
21:15:13 <dmiles> i saw in old cyc api docs on the wen a NL interface
21:15:32 <dmiles> then even called someome who has the govt version to see if it works for them
21:15:45 <dmiles> it was undefined in their API
21:16:26 <dmiles> so i am though not sure if it ever existed or still does ;P
21:17:05 <dmiles> there is so much good NL data in cyc its almost rivial to impliment the NL parser
21:17:54 <Loplin> almost but not quite
21:18:03 <deltab> so why doesn't someone do it?
21:18:13 <dmiles> well 2 things..
21:18:19 <Loplin> I dont want to have to put #$ in front of is a
21:18:29 <dmiles> one is SubL modules cant yet be written.. that may be Cyc 0.7
21:18:48 <dmiles> so noone outside of cyccorp can do this for Cyc
21:19:04 <deltab> according to the website, "The Cyc system also includes a variety of interface tools that permit the user to browse, edit, and extend the Cyc KB, to pose queries to the inference engine, and to interact with the natural-language and database integration modules."
21:19:41 <deltab> oh, hmm
21:19:50 <dmiles> that my be Cyc generate-phrase?>
21:20:24 <dmiles> bsh: cyc.converseObject("(generate-phrase '(?P #$Dog ?What))")
21:20:25 <CycLBot> ?P dog ?WHAT
21:20:30 <Loplin> would cyc be able to understand figures of speeches?
21:20:32 <dmiles> bsh: cyc.converseObject("(generate-phrase '(#$isa #$Dog ?What))")
21:20:34 <CycLBot> for every ?WHAT, dogs are a ?WHAT
21:20:42 <deltab> ah
21:20:43 <dmiles> bsh: cyc.converseObject("(generate-phrase '(#$isa #$Dog #$Collection))")
21:20:44 <CycLBot> dogs are types of things
21:21:08 <deltab> now, you need a nicer command to access than  bsh: cyc.converseObject("(generate-phrase  etc.
21:21:13 <dmiles> they are changing this part heavily.. once based on genPhrase its going to be genTemplate
21:21:24 <dmiles> was subl:
21:21:43 <dmiles> heh.. heck i'll fix that it porobly only 2 secpomnds of work ;P
21:22:19 <dmiles> bsh: client
21:22:19 <CycLBot> CycLBot
21:22:25 <dmiles> bsh: client.getClass()
21:22:26 <CycLBot> class logicmoo.agent.MooIrcBot
21:22:37 * dmiles needed to know which file
21:22:57 <Loplin> how bis is the kb?
21:23:04 <Loplin> big*
21:23:14 <Loplin> a lot of megabytes?
21:23:18 <Loplin> just a few?
21:23:29 <Loplin> i'm in windows, so i cant check
21:23:31 <deltab> heh, Google says: Did you mean:logimoo.agent.Mircbot
21:23:55 <dmiles> hah
21:25:03 <Loplin> ?
21:25:16 <Loplin> well
21:25:20 <Loplin> I have to get to bed
21:25:34 <Loplin> have somewhere to go tomorrow and its pretty late
21:25:47 <Loplin> so, thanks for all your help
21:26:08 <Loplin> bye
21:26:11 <dmiles>  it was fun
21:26:17 <Loplin> yup
21:26:24 --- quit: Loplin ("I'm gone")
21:30:48 --- quit: CycLBot (Remote closed the connection)
21:31:16 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
21:31:31 <dmiles> subL 1+1
21:31:40 <dmiles> subL: (+ 1 1)
21:31:49 <dmiles> subl: (+ 1 1)
21:33:33 --- quit: CycLBot (Remote closed the connection)
21:34:46 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
21:35:27 <dmiles> subl: (+ 1 1)
21:54:48 --- join: thayne (~Thayne@cpe-66-1-186-187.ut.sprintbbd.net) joined #opencyc
22:39:56 --- quit: CycLBot (Remote closed the connection)
22:45:03 --- part: thayne left #opencyc
23:13:14 --- quit: devEiant ("Client Exiting")
23:36:30 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
23:41:23 --- quit: CycLBot (Remote closed the connection)
23:41:31 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
23:43:34 <deltab> http://hackles.org/cgi-bin/archives.pl?request=214
23:46:06 --- quit: CycLBot (Remote closed the connection)
23:46:19 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
23:49:29 --- quit: CycLBot (Remote closed the connection)
23:49:55 --- join: CycLBot (~CycLBot@12.211.44.132) joined #opencyc
23:57:23 --- quit: CycLBot (Remote closed the connection)
23:59:59 --- log: ended opencyc/02.10.18
